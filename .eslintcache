[{"/home/sonal/Documents/projects/changing-habits-adminpanel/src/index.js":"1","/home/sonal/Documents/projects/changing-habits-adminpanel/src/store.js":"2","/home/sonal/Documents/projects/changing-habits-adminpanel/src/App.js":"3","/home/sonal/Documents/projects/changing-habits-adminpanel/src/polyfill.js":"4","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/index.js":"5","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/forgetPassword/forgetPassword.js":"6","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/sygnet.js":"7","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/otpVerify/index.js":"8","/home/sonal/Documents/projects/changing-habits-adminpanel/src/api.js":"9","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reusable/validations/loginValidations.js":"10","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo-negative.js":"11","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo.js":"12","/home/sonal/Documents/projects/changing-habits-adminpanel/src/apiConstants.js":"13","/home/sonal/Documents/projects/changing-habits-adminpanel/src/history.js":"14","/home/sonal/Documents/projects/changing-habits-adminpanel/src/utils/helper.js":"15","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/resetPassword/resetPassword.js":"16","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/login/Login.js":"17","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheLayout.js":"18","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/index.js":"19","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/index.js":"20","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/authReducer.js":"21","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/sidebarReducer.js":"22","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheContent.js":"23","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheSidebar.js":"24","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownTasks.js":"25","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownNotif.js":"26","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownMssg.js":"27","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeader.js":"28","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdown.js":"29","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheFooter.js":"30","/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/types.js":"31","/home/sonal/Documents/projects/changing-habits-adminpanel/src/routes.js":"32","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/_nav.js":"33","/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/index.js":"34","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/svgs/defaultUser.js":"35","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/staticContent.js":"36","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/faqQ.js":"37","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/editFaqs/editFaqs.js":"38","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/addFqs/addFaqs.js":"39","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/editUser.js":"40","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/editStaticContent/editStaticContent.js":"41","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/viewStaticContent.js":"42","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/editAdmin.js":"43","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/adminProfile.js":"44","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/changePassword/changePassword.js":"45","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/addRecipe.js":"46","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/User.js":"47","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/newUsers.js":"48","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/recipes.js":"49","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/page404/Page404.js":"50","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/updateEmailOtp.js":"51","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/theme/colors/Colors.js":"52","/home/sonal/Documents/projects/changing-habits-adminpanel/src/globalComponent/loader.js":"53","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/getFrame.js":"54"},{"size":438,"mtime":1625149239432,"results":"55","hashOfConfig":"56"},{"size":929,"mtime":1625149239520,"results":"57","hashOfConfig":"56"},{"size":1630,"mtime":1625149239344,"results":"58","hashOfConfig":"56"},{"size":1895,"mtime":1625149239440,"results":"59","hashOfConfig":"56"},{"size":3839,"mtime":1625149239376,"results":"60","hashOfConfig":"56"},{"size":4394,"mtime":1625463776717,"results":"61","hashOfConfig":"56"},{"size":978,"mtime":1625149239388,"results":"62","hashOfConfig":"56"},{"size":6868,"mtime":1625149239688,"results":"63","hashOfConfig":"56"},{"size":15782,"mtime":1625491629177,"results":"64","hashOfConfig":"56"},{"size":4026,"mtime":1625496709496,"results":"65","hashOfConfig":"56"},{"size":6933,"mtime":1625149239388,"results":"66","hashOfConfig":"56"},{"size":6920,"mtime":1625149239388,"results":"67","hashOfConfig":"56"},{"size":1466,"mtime":1625463776717,"results":"68","hashOfConfig":"56"},{"size":87,"mtime":1625149239432,"results":"69","hashOfConfig":"56"},{"size":480,"mtime":1625491665144,"results":"70","hashOfConfig":"56"},{"size":9644,"mtime":1625149239704,"results":"71","hashOfConfig":"56"},{"size":8720,"mtime":1625497357634,"results":"72","hashOfConfig":"56"},{"size":421,"mtime":1625404568550,"results":"73","hashOfConfig":"56"},{"size":388,"mtime":1625149239452,"results":"74","hashOfConfig":"56"},{"size":596,"mtime":1625149239432,"results":"75","hashOfConfig":"56"},{"size":508,"mtime":1625491674923,"results":"76","hashOfConfig":"56"},{"size":444,"mtime":1625149239452,"results":"77","hashOfConfig":"56"},{"size":1320,"mtime":1625149239400,"results":"78","hashOfConfig":"56"},{"size":1481,"mtime":1625463776717,"results":"79","hashOfConfig":"56"},{"size":2253,"mtime":1625149239428,"results":"80","hashOfConfig":"56"},{"size":2434,"mtime":1625149239428,"results":"81","hashOfConfig":"56"},{"size":4789,"mtime":1625149239428,"results":"82","hashOfConfig":"56"},{"size":1772,"mtime":1625404421190,"results":"83","hashOfConfig":"56"},{"size":2301,"mtime":1625404568526,"results":"84","hashOfConfig":"56"},{"size":217,"mtime":1625149239404,"results":"85","hashOfConfig":"56"},{"size":112,"mtime":1625149239352,"results":"86","hashOfConfig":"56"},{"size":3799,"mtime":1625149239480,"results":"87","hashOfConfig":"56"},{"size":599,"mtime":1625480589931,"results":"88","hashOfConfig":"56"},{"size":668,"mtime":1625424806835,"results":"89","hashOfConfig":"56"},{"size":728,"mtime":1625149239400,"results":"90","hashOfConfig":"56"},{"size":4765,"mtime":1625481290669,"results":"91","hashOfConfig":"56"},{"size":11337,"mtime":1625481335417,"results":"92","hashOfConfig":"56"},{"size":5070,"mtime":1625478823913,"results":"93","hashOfConfig":"56"},{"size":4515,"mtime":1625140099033,"results":"94","hashOfConfig":"56"},{"size":15450,"mtime":1625469295404,"results":"95","hashOfConfig":"56"},{"size":6207,"mtime":1625149239748,"results":"96","hashOfConfig":"56"},{"size":2625,"mtime":1625149239760,"results":"97","hashOfConfig":"56"},{"size":11981,"mtime":1625463776717,"results":"98","hashOfConfig":"56"},{"size":4455,"mtime":1625463776717,"results":"99","hashOfConfig":"56"},{"size":9868,"mtime":1625463776717,"results":"100","hashOfConfig":"56"},{"size":16812,"mtime":1625488012534,"results":"101","hashOfConfig":"56"},{"size":5283,"mtime":1625463776717,"results":"102","hashOfConfig":"56"},{"size":12830,"mtime":1625504443068,"results":"103","hashOfConfig":"56"},{"size":13829,"mtime":1625481238272,"results":"104","hashOfConfig":"56"},{"size":862,"mtime":1625149239688,"results":"105","hashOfConfig":"56"},{"size":6826,"mtime":1625149239556,"results":"106","hashOfConfig":"56"},{"size":3592,"mtime":1625149239772,"results":"107","hashOfConfig":"56"},{"size":539,"mtime":1625140099029,"results":"108","hashOfConfig":"56"},{"size":256,"mtime":1625404568566,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1v84vs3",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"112"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"112"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"112"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"112"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"112"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"/home/sonal/Documents/projects/changing-habits-adminpanel/src/index.js",[],["238","239"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/store.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/App.js",["240"],"import React, { Component } from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport \"./scss/style.scss\";\nimport history from \"../src/history\";\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n);\n\nconst TheLayout = React.lazy(() => import(\"./containers/TheLayout\"));\n\nconst Login = React.lazy(() => import(\"./views/pages/login/Login\"));\nconst Resetpassword = React.lazy(() =>\n  import(\"./views/pages/resetPassword/resetPassword\")\n);\nconst Forgetpassword = React.lazy(() =>\n  import(\"./views/pages/forgetPassword/forgetPassword\")\n);\nconst OtpVerify = React.lazy(() => import(\"./views/pages/otpVerify\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={history}>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route\n              exact\n              path=\"/login\"\n              name=\"Login Page\"\n              render={(props) => <Login {...props} />}\n            />\n            <Route\n              exact\n              path=\"/resetpassword\"\n              name=\"Reset Pass\"\n              render={(props) => <Resetpassword {...props} />}\n            />\n            <Route\n              exact\n              path=\"/forgetpassword\"\n              name=\"Forget Pass\"\n              render={(props) => <Forgetpassword {...props} />}\n            />\n            <Route\n              path=\"/\"\n              name=\"Home\"\n              render={(props) => <TheLayout {...props} />}\n            />\n          </Switch>\n        </React.Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/polyfill.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/forgetPassword/forgetPassword.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/sygnet.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/otpVerify/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/api.js",["241","242","243","244"],"import axios from \"axios\";\nimport apiConstant from \"src/apiConstants\";\nimport { apiError, header } from \"./utils/helper\";\nimport { store } from \"./store\";\n\nexport const api = axios.create({\n  baseURL: `http://54.158.24.113/changinghabits`,\n});\n\nexport const api2 = \"http://54.158.24.113/changinghabits\";\n\nconst token = store.getState().auth.isSignedIn;\n\nexport const SavePost = (body) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.AddRecipe}`, body, {\n        headers: header(),\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const EditPost = (recipe_id, body) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.EditRecipe}/${recipe_id}`,\n        body,\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const GetUserProfile = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(`${apiConstant.GetUserProfile}`, {\n        headers: header(),\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const GetUserManagementDetails = (user_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        `${apiConstant.GetUserManagementDetails}/${user_id}`,\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const UpdateEmailOrPhone = (userId, email) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.UpdateEmailOrPhone}`,\n        {\n          userId: userId,\n          emailOrPhoneNumber: email,\n        },\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const UpdateProfile = (bodyFormData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(\n        `${apiConstant.UpdateProfile}`,\n        JSON.stringify(bodyFormData),\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const forgetpasswordApi = (email) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.ForgotPassword}`, {\n        email: email,\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n      reject(\"An account with given info does not exist\");\n    }\n  });\n};\n\nexport const verifyOTP = (email, otp) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.VerifyOtp}`, {\n        emailOrPhoneNumber: email,\n        otp: otp,\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const resetPassword = (email, password, confirmPassword, otp) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.ResetPassword}`, {\n        password: password,\n        confirmPassword: confirmPassword,\n        emailOrPhoneNumber: email,\n        otp: otp,\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const ChangePasswordApi = (formData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(\n        `${apiConstant.ChangePassword}`,\n        JSON.stringify(formData),\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n      reject(\"Invalid Old Password\");\n    }\n  });\n};\n\nexport const signIn = (formValues) => {\n  let data = {};\n  if (formValues.email_phone) data.email_phone = formValues.email_phone;\n  data.password = formValues.password;\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.Login}`, data);\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data.message);\n      }\n    } catch (error) {\n      apiError(error);\n      reject(\"Invalid Credentials Entered\");\n    }\n  });\n};\n\nexport const addUserList = (bodyFormData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(\n        `${apiConstant.AddUser}`,\n        JSON.stringify(bodyFormData),\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: token,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const ViewUserDetails = (user_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        `${apiConstant.ViewUserDetails}/${user_id}`,\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const GetUserList = (page, search, accountType) => {\n  let searchKey;\n  if (search) {\n    searchKey = `&searchKey=${search}`;\n  } else {\n    searchKey = \"\";\n  }\n  let status;\n  if (accountType == 0 || accountType == 1) {\n    status = `&status=${accountType}`;\n  } else {\n    status = \"\";\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        apiConstant.GetUserList.concat(`${page}${searchKey}${status}`),\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n      reject(error);\n    }\n  });\n};\n\nexport const ChangeUserStatus = (id, status) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.ChangeUserStatus}/${id}`,\n        {\n          status: status,\n        },\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const EditUserDetails = (data, id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.EditUserDetails}/${id}`,\n        JSON.stringify(data),\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const uploadImage = (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(`${apiConstant.uploadImage}`, data, {\n        headers: {\n          Authorization: store.getState().auth.isSignedIn,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      // .then((response) => response);\n\n      if (response.status == 200) {\n        resolve(response);\n      } else {\n        reject(response.message);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  });\n};\n\nexport const GetRecipeList = (page, search, recipeType) => {\n  let searchKey;\n  if (search) {\n    searchKey = `&searchKey=${search}`;\n  } else {\n    searchKey = \"\";\n  }\n  let type;\n  if (recipeType) {\n    type = `&type=${recipeType}`;\n  } else type = \"\";\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        apiConstant.GetRecipesList.concat(`${page}${searchKey}${type}`),\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n      reject(error);\n    }\n  });\n};\n\nexport const DeleteRecipe = (recipe_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.delete(\n        `${apiConstant.DeleteRecipe}/${recipe_id}`,\n        {\n          headers: {\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            accept: \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const GetRecipeDetail = (recipe_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        `${apiConstant.GetRecipeDetail}/${recipe_id}`,\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const addFaq = (body) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.post(`${apiConstant.addFaq}`, body, {\n        headers: header(),\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const DeleteFaq = (faq_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.delete(`${apiConstant.DeleteFaq}/${faq_id}`, {\n        headers: {\n          Authorization: store.getState().auth.isSignedIn,\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          accept: \"application/json\",\n        },\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const editFaqs = (faq_id, body) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.EditFaqs}/${faq_id}`,\n        JSON.stringify(body),\n        {\n          headers: {\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/json\",\n            accept: \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const getFaqById = (faq_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(`${apiConstant.GetFaqById}/${faq_id}`, {\n        headers: header(),\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const getFaqs = (page) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        apiConstant.GetFaqs.concat(`?page=${page}&page_size=10`),\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const getFileContent = (url) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        `/api/v1/admin/htmlFileToText?file_url=${url}`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: token,\n          },\n        }\n      );\n      // .then((response) => response.text());\n\n      if (response.status == 200) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const getStaticContentDetails = (content_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(\n        `${apiConstant.GetContentDetails}/${content_id}`,\n        {\n          headers: header(),\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const getStaticContents = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.get(apiConstant.GetStaticContentList, {\n        headers: header(),\n      });\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const updateStaticContent = (body) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await api.put(\n        `${apiConstant.updateStaticContent}`,\n        JSON.stringify(body),\n        {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: store.getState().auth.isSignedIn,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.data.success) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n\nexport const ToggleFaqStatus = (faq_id) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = fetch(\n        `${api2}/${apiConstant.ToggleFaqStatus}/${faq_id}`,\n        {\n          headers: header(),\n          method: \"PUT\",\n        }\n      );\n\n      if (response) {\n        resolve(response.data);\n      } else {\n        reject(response.data);\n      }\n    } catch (error) {\n      apiError(error);\n    }\n  });\n};\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reusable/validations/loginValidations.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo-negative.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/apiConstants.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/history.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/utils/helper.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/resetPassword/resetPassword.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/login/Login.js",["245"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CModal,\n  CModalHeader,\n  CInputGroupAppend,\n} from \"@coreui/react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { store } from \"../../../store\";\n\nimport { loginValidation } from \"../../../reusable/validations/loginValidations\";\n\nimport { signIn } from \"../../../api\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(null);\n  const [showpass, setShowPass] = useState(\"password\");\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const initialValues = {\n    email_phone: sessionStorage.getItem(\"email_phone\")\n      ? sessionStorage.getItem(\"email_phone\")\n      : location.state && location.state.email_phone\n      ? location.state.email_phone\n      : null,\n    password: sessionStorage.getItem(\"pass\")\n      ? sessionStorage.getItem(\"pass\")\n      : \"\",\n    error: \"\",\n  };\n\n  const onSubmit = async (values, actions) => {\n    try {\n      if (values.email_phone) {\n        setLoading(true);\n        const res = await signIn(values);\n\n        if (res.success) {\n          await dispatch({\n            type: \"SIGN_IN\",\n            payload: res,\n          });\n          setLoading(false);\n          setMessage(null);\n          history.push(\"/users\");\n          if (values.RememberMe) {\n            sessionStorage.setItem(\"email_phone\", values.email_phone);\n            sessionStorage.setItem(\"pass\", values.password);\n          } else {\n            sessionStorage.clear();\n          }\n        }\n      } else setMessage(\"Please enter Email or Phone Number\");\n    } catch (error) {\n      setLoading(false);\n      actions.setFieldError(\"error\", error);\n      console.log(error);\n    }\n  };\n\n  function handleForgotPassword() {\n    history.push(\"/forgetpassword\");\n  }\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: loginValidation,\n    onSubmit,\n  });\n\n  useEffect(() => localStorage.clear(), []);\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CModal\n          show={location.state && location.state.email}\n          backdrop={false}\n          size=\"sm\"\n          color=\"warning\"\n        >\n          <CModalHeader closeButton>Password Changed Successfully</CModalHeader>\n        </CModal>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={formik.handleSubmit}>\n                    <h1>Login</h1>\n                    <p className=\"text-muted\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"text\"\n                        placeholder=\"Email/Phone\"\n                        autoComplete=\"email_phone\"\n                        id=\"email_phone\"\n                        name=\"email_phone\"\n                        onBlur={formik.handleBlur}\n                        value={formik.values.email_phone}\n                        onChange={formik.handleChange}\n                      />\n                    </CInputGroup>\n                    {formik.touched.email_phone && formik.errors.email_phone ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.email_phone}\n                      </div>\n                    ) : null}\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type={showpass}\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        name=\"password\"\n                        onBlur={formik.handleBlur}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText\n                          onClick={() => {\n                            if (showpass === \"password\") {\n                              setShowPass(\"text\");\n                            } else {\n                              setShowPass(\"password\");\n                            }\n                          }}\n                        >\n                          <FontAwesomeIcon\n                            color=\"blue\"\n                            size=\"sm\"\n                            icon={showpass !== \"password\" ? faEye : faEyeSlash}\n                          />{\" \"}\n                          {/* <i className={showpass !== 'password' ? \"fa fa-eye\" : \"fa fa-eye-slash\"} /> */}\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                    {formik.touched.password && formik.errors.password ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.password}\n                      </div>\n                    ) : null}\n                    <CRow>\n                      <CCol xs=\"4\">\n                        <CInputGroup\n                          style={{\n                            marginTop: \"-8px\",\n                            paddingBottom: \"12px\",\n                          }}\n                        >\n                          <CInput\n                            type=\"checkbox\"\n                            placeholder=\"Remember Me\"\n                            name=\"RememberMe\"\n                            style={{ fontSize: \"4px\", marginLeft: \"-9px\" }}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.RememberMe}\n                            onChange={formik.handleChange}\n                          />\n                          <p\n                            style={{\n                              paddingLeft: \"5px\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Remember me\n                          </p>\n                        </CInputGroup>\n                      </CCol>\n                    </CRow>\n                    {formik.errors.error ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.error}\n                      </div>\n                    ) : null}\n                    {message ? (\n                      <div className=\"email-validate\">{message}</div>\n                    ) : null}\n                    <CRow>\n                      <CCol xs=\"6\">\n                        {!loading ? (\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            type=\"submit\"\n                          >\n                            Login\n                          </CButton>\n                        ) : (\n                          <div\n                            className=\"spinner-border text-primary\"\n                            role=\"status\"\n                          >\n                            <span className=\"sr-only\">Loading...</span>\n                          </div>\n                        )}\n                      </CCol>\n                      <CCol xs=\"6\" className=\"text-right\">\n                        <CButton\n                          color=\"link\"\n                          className=\"px-0\"\n                          onClick={() => handleForgotPassword()}\n                        >\n                          Forgot Password?\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheLayout.js",["246"],"import React from \"react\";\nimport { TheContent, TheSidebar, TheFooter, TheHeader } from \"./index\";\n\nconst TheLayout = () => {\n  return (\n    <div className=\"c-app c-default-layout\">\n      <TheSidebar />\n      <div className=\"c-wrapper\">\n        <TheHeader />\n        <div className=\"c-body\">\n          <TheContent />\n        </div>\n        {/* <TheFooter /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default TheLayout;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/authReducer.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/sidebarReducer.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheContent.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheSidebar.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownTasks.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownNotif.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownMssg.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeader.js",["247","248"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CHeader, CToggler, CHeaderBrand, CHeaderNav } from \"@coreui/react\";\n\nimport biglogo from \"../assets/icons/dish.jpeg\";\nimport { setSideBar } from \"../actions/index\";\nimport { TheHeaderDropdown } from \"./index\";\n\nconst TheHeader = () => {\n  const dispatch = useDispatch();\n  const sidebarShow = useSelector((state) => state.sidebar.sidebarShow);\n\n  const toggleSidebar = () => {\n    const val = [true, \"responsive\"].includes(sidebarShow)\n      ? false\n      : \"responsive\";\n    dispatch(setSideBar(val));\n  };\n\n  const toggleSidebarMobile = () => {\n    const val = [false, \"responsive\"].includes(sidebarShow)\n      ? true\n      : \"responsive\";\n    dispatch(setSideBar(val));\n  };\n\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n\n      <CHeaderNav className=\"d-md-down-none mr-auto\">\n        {/* <CHeaderNavItem className=\"px-3\" >\n          <CHeaderNavLink to=\"/dashboard\">Dashboard</CHeaderNavLink>\n        </CHeaderNavItem>\n        <CHeaderNavItem className=\"px-3\">\n          <CHeaderNavLink to=\"/users\">Users</CHeaderNavLink>\n        </CHeaderNavItem>\n        <CHeaderNavItem className=\"px-3\">val\n          <CHeaderNavLink>Settings</CHeaderNavLink>\n        </CHeaderNavItem> */}\n      </CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        {/* <TheHeaderDropdownNotif /> */}\n        {/* <TheHeaderDropdownTasks />\n        <TheHeaderDropdownMssg /> */}\n        <TheHeaderDropdown />\n      </CHeaderNav>\n    </CHeader>\n  );\n};\n\nexport default TheHeader;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdown.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheFooter.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/types.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/routes.js",["249"],"import React from \"react\";\nimport AddRecipe from \"./views/recipeManagement/addRecipe\";\n\nconst UpdateEmail = React.lazy(() =>\n  import(\"./views/adminProfile/updateEmailOtp\")\n);\nconst Colors = React.lazy(() => import(\"./views/theme/colors/Colors\"));\nconst NewUsers = React.lazy(() => import(\"./views/users/newUsers\"));\nconst Page404 = React.lazy(() => import(\"./views/pages/page404/Page404\"));\n\nconst RecipeManagement = React.lazy(() =>\n  import(\"./views/recipeManagement/recipes\")\n);\nconst RecipeAdd = React.lazy(() =>\n  import(\"./views/recipeManagement/addRecipe\")\n);\nconst User = React.lazy(() => import(\"./views/users/User\"));\nconst EditUser = React.lazy(() => import(\"./views/users/editUser\"));\nconst ChangePassword = React.lazy(() =>\n  import(\"./views/changePassword/changePassword\")\n);\nconst AdminProfile = React.lazy(() =>\n  import(\"./views/adminProfile/adminProfile\")\n);\n\nconst EditAdmin = React.lazy(() => import(\"./views/adminProfile/editAdmin\"));\n\nconst StaticContent = React.lazy(() =>\n  import(\"./views/staticContentManagement/staticContent\")\n);\nconst ViewStaticContent = React.lazy(() =>\n  import(\"./views/staticContentManagement/viewStaticContent/viewStaticContent\")\n);\nconst EditStaticContent = React.lazy(() =>\n  import(\"./views/staticContentManagement/editStaticContent/editStaticContent\")\n);\nconst AddFaqs = React.lazy(() =>\n  import(\"./views/staticContentManagement/Faqs/addFqs/addFaqs\")\n);\nconst FAQS = React.lazy(() =>\n  import(\"./views/staticContentManagement/viewStaticContent/faqQ\")\n);\nconst EditFqs = React.lazy(() =>\n  import(\"./views/staticContentManagement/Faqs/editFaqs/editFaqs\")\n);\n\nconst routes = [\n  { path: \"/\", exact: true, name: \"Users\", component: User },\n  { path: \"/theme\", name: \"Theme\", component: Colors, exact: true },\n  { path: \"/theme/colors\", name: \"Colors\", component: Colors },\n  {\n    path: \"/recipeManagement\",\n    exact: true,\n    name: \"RecipeManagement\",\n    component: RecipeManagement,\n  },\n  {\n    path: \"/addrecipe\",\n    exact: true,\n    name: \"Add Recipe\",\n    component: RecipeAdd,\n  },\n  {\n    path: \"/addrecipe/:id\",\n    exact: true,\n    name: \"Add User\",\n    component: RecipeAdd,\n  },\n  { path: \"/users\", exact: true, name: \"Users\", component: NewUsers },\n  {\n    path: \"/categorytypemanagement\",\n    exact: true,\n    name: \"Category\",\n    component: \"\",\n  },\n\n  { path: \"/user/:id\", exact: true, name: \"User Details\", component: User },\n  {\n    path: \"/editUser/:id\",\n    exact: true,\n    name: \"Edit User\",\n    component: EditUser,\n  },\n  {\n    path: \"/addUser\",\n    exact: true,\n    name: \"Edit User\",\n    component: EditUser,\n  },\n  {\n    path: \"/changePassword\",\n    exact: true,\n    name: \"Change Password\",\n    component: ChangePassword,\n  },\n  { path: \"/profile\", exact: true, name: \"Profile\", component: AdminProfile },\n\n  { path: \"/editAdmin\", exact: true, name: \"Edit Admin\", component: EditAdmin },\n  {\n    path: \"/updateEmail\",\n    exact: true,\n    name: \"Edit Admin\",\n    component: UpdateEmail,\n  },\n  {\n    path: \"/static\",\n    exact: true,\n    name: \"StaticContent\",\n    component: StaticContent,\n  },\n  {\n    path: `/viewStaticContent/:id`,\n    exact: true,\n    name: \"View Content\",\n    component: ViewStaticContent,\n  },\n  {\n    path: [\n      `/viewStaticContent/:id/faqs`,\n      `/viewStaticContent/:id/faqs/:topicid`,\n    ],\n    exact: true,\n    name: \"FAQS\",\n    component: FAQS,\n  },\n  {\n    path: `/editStaticContent/:id`,\n    exact: true,\n    name: \"Edit Content\",\n    component: EditStaticContent,\n  },\n  {\n    path: `/viewStaticContent/:id/addFaqs`,\n    exact: true,\n    name: \"Add Faqs\",\n    component: AddFaqs,\n  },\n  {\n    path: `/viewStaticContent/:id/faqs/:questionId/editFaqs/`,\n    exact: true,\n    name: \"Edit Faqs\",\n    component: EditFqs,\n  },\n\n  { component: Page404 },\n];\n\nexport default routes;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/_nav.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/svgs/defaultUser.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/staticContent.js",["250","251"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CTooltip,\n} from \"@coreui/react\";\nimport { freeSet } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport moment from \"moment\";\n\nimport { getStaticContents } from \"../../api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\n\nconst fields = [\n  { key: \"id\", label: \"S.No\", _style: { fontFamily: \"Poppins\" } },\n  {\n    key: \"title\",\n    label: \"Page Name \",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"updatedAt\",\n    label: \"Last Updated\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"show_details\",\n    label: \"Action\",\n    _style: { minWidth: \"7rem\" },\n    sorter: false,\n    filter: false,\n  },\n];\nconst StaticContentList = () => {\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const data = await getStaticContents();\n        setLoading(false);\n        data.staticContentList.map((item) => {\n          item._classes = \"catTableItem\";\n\n          if (item.updatedAt) {\n            item.updatedAt = moment(item.updatedAt).format(\"LLL\");\n          }\n          return item;\n        });\n        setData(data.staticContentList);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    getData();\n  }, []);\n\n  return (\n    <CRow>\n      <CCol xxl={12}>\n        <CCard>\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\n            <h2>\n              <strong>Content Management</strong>\n            </h2>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={data}\n              fields={fields}\n              hover\n              border\n              addTableClasses=\"table-class\"\n              striped\n              loading={loading}\n              noItemsViewSlot={\n                !loading ? \"\" : <div style={{ height: \"14rem\" }}></div>\n              }\n              clickableRows\n              scopedSlots={{\n                show_details: (item) => {\n                  return (\n                    <td>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-around\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {item.id != 5 ? (\n                          <CTooltip\n                            content={\"Edit Content\"}\n                            placement={\"top-start\"}\n                          >\n                            <CIcon\n                              onClick={() =>\n                                history.push({\n                                  pathname: `/editStaticContent/${item.id}`,\n                                  state: { item },\n                                })\n                              }\n                              style={{ color: \"red\", cursor: \"pointer\" }}\n                              size=\"lg\"\n                              content={freeSet.cilPencil}\n                            />\n                          </CTooltip>\n                        ) : (\n                          \"\"\n                        )}\n                        <CTooltip\n                          content={`View Content`}\n                          placement={\"top-start\"}\n                        >\n                          <FontAwesomeIcon\n                            color=\"green\"\n                            size=\"lg\"\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() =>\n                              item.id == 5\n                                ? history.push({\n                                    pathname: `/viewStaticContent/${item.id}/faqs`,\n                                    state: { item },\n                                  })\n                                : history.push({\n                                    pathname: `/viewStaticContent/${item.id}`,\n                                    state: { item },\n                                  })\n                            }\n                            icon={faEye}\n                          />\n                        </CTooltip>\n                      </div>\n                    </td>\n                  );\n                },\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default StaticContentList;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/faqQ.js",["252","253","254","255","256","257","258","259","260"],"import React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"react-collapse\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\nimport { DeleteFaq, getFaqs, ToggleFaqStatus } from \"../../../api\";\nimport { useHistory, useParams } from \"react-router\";\nimport { freeSet, cibWindows } from \"@coreui/icons\";\nimport _ from \"lodash\";\nimport {\n  CPagination,\n  CButton,\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CModalBody,\n  CModalTitle,\n  CSwitch,\n  CTooltip,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst FAQS = () => {\n  const history = useHistory();\n\n  // const { id } = useParams();\n  const path = useParams();\n  const id = path.id;\n  const topicid = path.topicid;\n\n  const [statusOpened, setStatusOpened] = useState({});\n  const [qus, setQus] = useState([]);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [questionId, setQuestionId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [enableModal, setEnableModal] = useState(false);\n  const [refresh, setRefresh] = useState(false);\n\n  const [show, setShow] = useState(null);\n  const [error, setError] = useState(null);\n  const [active, setActive] = useState(null);\n  const [activePage, setCurrentPage] = useState(1);\n  const [totalItems, setTotalItems] = useState(null);\n\n  const handleCollapse = (e, id) => {\n    // let updatedStatus = { ...statusOpened };\n    let updatedStatus = { statusOpened };\n    updatedStatus[id] = !updatedStatus[id];\n    setStatusOpened(updatedStatus);\n  };\n\n  const toggleEnable = (id) => {\n    setUserId(id);\n    setEnableModal(!enableModal);\n  };\n\n  const handleEnable = async () => {\n    try {\n      setEnableModal(!enableModal);\n      await ToggleFaqStatus(userId);\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    handleQuestions();\n  }, [refresh, activePage]);\n\n  const handleQuestions = async () => {\n    if (refresh) setRefresh(!refresh);\n\n    const data = await getFaqs(activePage ? activePage : 1);\n    if (data.status == 200) {\n      setError(null);\n      let rows = data.faqsData.rows;\n      let Status = {};\n      rows.forEach(({ id }) => (Status[id] = false));\n      setStatusOpened(Status);\n      setQus(data.faqsData.rows);\n      setTotalItems(data.faqsData.count);\n      let newStartId = 10 * (activePage - 1);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      setDeleteModal(!deleteModal);\n      const deleteResult = await DeleteFaq(questionId);\n      if (deleteResult.status == 200) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <>\n      <CModal\n        show={deleteModal}\n        centered={true}\n        backdrop={true}\n        color=\"warning\"\n        onClose={setDeleteModal}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Delete FAQ?</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          Are you sure you want to Delete this FAQ question?\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={handleDelete}>\n            Yes\n          </CButton>\n          <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n\n      <CModal\n        show={enableModal}\n        centered={true}\n        color=\"warning\"\n        onClose={setEnableModal}\n        backdrop={true}\n        style={{ fontFamily: \"Poppins\" }}\n      >\n        <CModalHeader style={{ height: \"3rem\" }}>\n          <CModalTitle>{active ? \"Disable Faq?\" : \"Enable Faq?\"}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {active\n            ? \"Are you sure you want to disable this Faq?\"\n            : \"Are you sure you want to enable this Faq?\"}\n        </CModalBody>\n        <CModalFooter style={{ height: \"4rem\" }}>\n          <CButton color=\"success\" onClick={handleEnable}>\n            Yes\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setEnableModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <div\n        className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\"\n        style={{ height: \"100vh\" }}\n      >\n        <div id=\"recipients\" className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded  \">\n          <h1 className=\"text-3xl\">FAQs</h1>\n          <br />\n          <div style={{ marginLeft: \"76%\", marginTop: \"-88px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.push(`/viewStaticContent/${id}/addFaqs`)}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Add New\n            </CButton>\n          </div>\n        </div>\n        <div className=\"flex \">\n          {qus && (\n            <div\n              style={{\n                marginLeft: \"90px\",\n                backgroundColor: \"white\",\n                padding: \"20px\",\n                height: \"fit-content\",\n                marginTop: \"50px\",\n                border: error != null ? \"1px solid white\" : \"1px solid black\",\n              }}\n            >\n              <div\n                id=\"doc\"\n                style={{\n                  height: \"fit-content\",\n                }}\n              >\n                {error ? (\n                  <p\n                    style={{\n                      color: \"red\",\n                      fontSize: \"20px\",\n                      textAlign: \"center\",\n                      width: \"100%\",\n                      marginTop: \"12px\",\n                    }}\n                  >\n                    {error}\n                  </p>\n                ) : (\n                  qus.map((ques) => {\n                    return (\n                      <>\n                        <div\n                          style={{\n                            width: \"100%\",\n                            padding: \"10px\",\n                          }}\n                          onClick={(e) => handleCollapse(e, ques.id)}\n                        >\n                          <label\n                            htmlFor={\"acc\" + ques.id}\n                            style={{ fontSize: \"20px\", wordBreak: \"break-all\" }}\n                            className=\"font-semibold\"\n                          >\n                            {ques.question}\n                            {!statusOpened[ques.id] ? (\n                              <ArrowDropDownIcon style={{ float: \"right\" }} />\n                            ) : (\n                              <ArrowDropUpIcon style={{ float: \"right\" }} />\n                            )}\n                          </label>\n                          <Collapse\n                            isOpened={statusOpened[ques.id]}\n                            id={\"acc\" + ques.id}\n                          >\n                            <div\n                              style={{\n                                backgroundColor: \"lightgrey\",\n                                padding: \"10px\",\n                                marginTop: \"3px\",\n                              }}\n                            >\n                              <p style={{ fontSize: \"17px\" }}>{ques.answer}</p>\n                              <div style={{ textAlign: \"right\" }}>\n                                <CTooltip\n                                  content={\"Edit Faq\"}\n                                  placement={\"top-start\"}\n                                >\n                                  <CIcon\n                                    onClick={() =>\n                                      history.push(\n                                        `/viewStaticContent/${id}/faqs/${ques.id}/editFaqs`\n                                      )\n                                    }\n                                    style={{\n                                      color: \"red\",\n                                      cursor: \"pointer\",\n                                      marginBottom: \"10px\",\n                                    }}\n                                    size=\"lg\"\n                                    content={freeSet.cilPencil}\n                                  />\n                                </CTooltip>\n\n                                <CTooltip\n                                  content={`Delete Faq\n                          `}\n                                  placement={\"top-start\"}\n                                  interactive={true}\n                                  trigger=\"mouseenter\"\n                                >\n                                  <CIcon\n                                    onClick={() => {\n                                      setShow(\"question\");\n                                      setDeleteModal(true);\n                                      setQuestionId(ques.id);\n                                    }}\n                                    size=\"lg\"\n                                    style={{\n                                      color: \"red\",\n                                      cursor: \"pointer\",\n                                      outline: \"none\",\n                                      boxShadow: \"none\",\n                                      marginBottom: \"10px\",\n                                    }}\n                                    content={freeSet.cilTrash}\n                                  />\n                                </CTooltip>\n                                <CSwitch\n                                  onChange={() => toggleEnable(ques.id)}\n                                  size=\"sm\"\n                                  variant={\"3d\"}\n                                  color={\"success\"}\n                                  checked={ques.status}\n                                />\n                              </div>\n                            </div>\n                          </Collapse>\n                        </div>\n                      </>\n                    );\n                  })\n                )}\n                <br /> (showing{\" \"}\n                {qus.length < 1\n                  ? 0\n                  : qus.length < 11\n                  ? 1\n                  : 10 * (activePage - 1) + 1}{\" \"}\n                - {qus.length} of {totalItems})\n                <div style={{ textAlign: \"right\" }}>\n                  <CPagination\n                    activePage={activePage}\n                    pages={Math.ceil(totalItems / 10)}\n                    onActivePageChange={handlePageChange}\n                    doubleArrows={true}\n                    align=\"start\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FAQS;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/editFaqs/editFaqs.js",["261","262","263","264"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { getFaqById, editFaqs } from \"../../../../api\";\nimport Loader from \"../../../../globalComponent/loader\";\nimport { CButton } from \"@coreui/react\";\n\nconst EditFqs = () => {\n  const history = useHistory();\n  const path = useParams();\n  const id = path.questionId;\n\n  const [faqs, setFaqs] = useState({});\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  useEffect(() => {\n    faqById();\n  }, []);\n\n  const faqById = () => {\n    const res = getFaqById(id)\n      .then((res) => {\n        setFaqs(res);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleValidation = () => {\n    let error = false;\n    if (faqs.question === \"\") {\n      setError(\"Please fill the question \");\n      error = true;\n    } else if (faqs.answer === \"\") {\n      setError(\"Please fill the answer \");\n      error = true;\n    }\n    return error;\n  };\n\n  const handleSubmit = () => {\n    if (!handleValidation()) {\n      let bodyData = {};\n      bodyData.question = faqs.question;\n      bodyData.answer = faqs.answer;\n\n      const res = editFaqs(faqs.id, bodyData)\n        .then((res) => {\n          if (res.status == 200) {\n            setError(null);\n            setSuccessMsg(\"FAQ updated successfully\");\n            setTimeout(() => {\n              history.push(`/viewStaticContent/${id}/faqs`);\n            }, 1000);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  };\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        <div\n          id=\"recipients\"\n          className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n        >\n          <h1 className=\"text-2xl\">Edit FAQ</h1>\n          <br />\n          <div style={{ marginLeft: \"80%\", marginTop: \"-70px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmit}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n          </div>\n          <br />\n          {error && (\n            <p\n              style={{\n                color: \"red\",\n                fontSize: \"20px\",\n                textAlign: \"center\",\n                width: \"100%\",\n                marginTop: \"12px\",\n              }}\n            >\n              {error}\n            </p>\n          )}\n          {successMsg && (\n            <div\n              style={{\n                backgroundColor: \"#9ACD32\",\n                padding: \"10px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"24px\",\n                width: \"fit-content\",\n              }}\n            >\n              {successMsg}\n            </div>\n          )}\n\n          {!faqs ? (\n            <Loader />\n          ) : (\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                height: \"400px\",\n              }}\n            >\n              <div className=\"flex mt-10 \">\n                <h1 className=\"text-xl ml-50 \">Question</h1>\n                <input\n                  style={{\n                    width: \"70%\",\n                    marginLeft: \"140px\",\n                    height: \"40px\",\n                    padding: \"10px\",\n                  }}\n                  placeholder=\"Enter the question \"\n                  value={faqs.question}\n                  onChange={(e) => {\n                    let updatedData = { ...faqs };\n                    updatedData[\"question\"] = e.target.value;\n                    setFaqs(updatedData);\n                  }}\n                />\n              </div>\n\n              <div className=\"flex mt-10 \">\n                <h1 className=\"text-xl ml-50 \">Answer</h1>\n                <textarea\n                  placeholder=\"Enter the answer \"\n                  style={{\n                    width: \"70%\",\n                    height: \"170px\",\n                    marginLeft: \"140px\",\n                    padding: \"10px\",\n                  }}\n                  id=\"ans\"\n                  value={faqs.answer}\n                  onChange={(e) => {\n                    let updatedData = { ...faqs };\n                    updatedData[\"answer\"] = e.target.value;\n                    setFaqs(updatedData);\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditFqs;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/addFqs/addFaqs.js",["265","266","267"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { CButton } from \"@coreui/react\";\nimport { addFaq } from \"../../../../api\";\nimport { useSelector } from \"react-redux\";\n\nconst AddFaqs = () => {\n  const token = useSelector((state) => state.auth.isSignedIn);\n  const history = useHistory();\n  const { id } = useParams();\n\n  const [data, setData] = useState({\n    answer: \"\",\n    question: \"\",\n  });\n\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  const handleValidation = () => {\n    let error = false;\n    if (data.question === \"\") {\n      setError(\"Please fill the question \");\n      error = true;\n    } else if (data.answer === \"\") {\n      setError(\"Please fill the answer \");\n      error = true;\n    }\n    return error;\n  };\n\n  const handleSubmit = async () => {\n    if (!handleValidation()) {\n      const res = await addFaq(data)\n        .then((res) => {\n          setSuccessMsg(\"FAQs added successfully\");\n          setTimeout(() => {\n            history.push(`/viewStaticContent/${id}/faqs`);\n          }, 1000);\n\n          setError(null);\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  };\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        <div\n          id=\"recipients\"\n          className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n        >\n          <h1 className=\"text-2xl\">Add FAQ</h1>\n          <br />\n          <div style={{ marginLeft: \"80%\", marginTop: \"-78px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmit}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n          </div>\n\n          <br />\n          {error && (\n            <p\n              style={{\n                color: \"red\",\n                fontSize: \"20px\",\n                textAlign: \"center\",\n                width: \"100%\",\n                marginTop: \"12px\",\n              }}\n            >\n              {error}\n            </p>\n          )}\n          {successMsg && (\n            <div\n              style={{\n                backgroundColor: \"#9ACD32\",\n                padding: \"10px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"24px\",\n                width: \"fit-content\",\n              }}\n            >\n              {successMsg}\n            </div>\n          )}\n          <div\n            style={{\n              marginTop: \"20px\",\n              backgroundColor: \"lightgrey\",\n              padding: \"20px\",\n              // width: '990px',\n              height: \"400px\",\n            }}\n          >\n            <div className=\"flex mt-10 \">\n              <h1 className=\"text-xl ml-50 \">Question</h1>\n              <input\n                style={{\n                  width: \"70%\",\n                  marginLeft: \"110px\",\n                  height: \"40px\",\n                  padding: \"10px\",\n                }}\n                placeholder=\"Enter the question\"\n                onChange={(e) => {\n                  let updatedData = { ...data };\n                  updatedData[\"question\"] = e.target.value;\n                  setData(updatedData);\n                }}\n              />\n            </div>\n\n            <div className=\"flex mt-10 \">\n              <h1 className=\"text-xl ml-50 \">Answer</h1>\n              <textarea\n                placeholder=\"Enter the answer\"\n                style={{\n                  width: \"70%\",\n                  height: \"100px\",\n                  marginLeft: \"110px\",\n                  padding: \"10px\",\n                }}\n                id=\"ans\"\n                onChange={(e) => {\n                  let updatedData = { ...data };\n                  updatedData[\"answer\"] = e.target.value;\n                  setData(updatedData);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AddFaqs;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/editUser.js",["268","269","270"],"import React, { useState, useEffect } from \"react\";\nimport FormData from \"form-data\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CImg,\n  CInputFile,\n} from \"@coreui/react\";\nimport { useFormik } from \"formik\";\nimport {\n  EditUserDetails,\n  addUserList,\n  ViewUserDetails,\n  uploadImage,\n} from \"../../api\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { UserValidation } from \"../../reusable/validations/loginValidations\";\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\n\nexport default function EditUser(props) {\n  const history = useHistory();\n  const params = useParams();\n  const [loading, setLoading] = useState(false);\n\n  const [userDetails, setUserDetails] = useState({});\n  const [showError, setShowError] = useState(null);\n  const [image, setImage] = useState({});\n\n  const initialValues = {\n    name: userDetails.name ? userDetails.name : \"\",\n    email: userDetails.email ? userDetails.email : \"\",\n    country_code: userDetails.country_code ? userDetails.country_code : \"\",\n    phone_no: userDetails.phone_no ? userDetails.phone_no : \"\",\n    profile_picture_url: userDetails.profile_picture_url\n      ? userDetails.profile_picture_url\n      : \"\",\n  };\n\n  const formdata = new FormData();\n\n  useEffect(() => {\n    if (params.id) getUserDetails();\n  }, []);\n\n  const getUserDetails = async () => {\n    try {\n      const res = await ViewUserDetails(params.id);\n      if (res.status == 200) {\n        setUserDetails(res);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleProfileChange = async (image) => {\n    setImage(image);\n  };\n\n  const onSubmit = async (values) => {\n    let bodyFormData = {};\n    formdata.append(\"image\", image, image.name);\n    formdata.append(\"folderName\", \"user\");\n    try {\n      const res = await uploadImage(formdata);\n      if (res.status == 200) {\n        bodyFormData.profile_picture_url = res.data.image_url;\n      }\n      bodyFormData.name = values.name;\n      if (params.id) {\n        setLoading(true);\n        const response = await EditUserDetails(bodyFormData, Number(params.id));\n        setLoading(false);\n        if (response) {\n          setShowError(null);\n          history.push(\"/users\");\n        }\n      } else {\n        bodyFormData.email = values.email;\n        bodyFormData.country_code = values.country_code;\n        bodyFormData.phone_no = values.phone_no;\n        setLoading(true);\n        const response = await addUserList(bodyFormData);\n        setLoading(false);\n        if (response) {\n          history.push(\"/users\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues,\n    onSubmit,\n    validationSchema: UserValidation,\n  });\n\n  return (\n    <CContainer\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <CCol xs=\"12\" md=\"6\">\n        {params.id ? (\n          <CCard>\n            <CCardHeader style={{ fontFamily: \"Lato\" }}>\n              <h3>\n                <strong>Edit User Details</strong>\n              </h3>\n            </CCardHeader>\n            <CCardBody style={{ fontFamily: \"Roboto\" }}>\n              <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\n                <CFormGroup row>\n                  <CCol xs=\"12\" style={{ textAlign: \"center\" }}>\n                    {userDetails.profile_picture_url ? (\n                      <>\n                        <CImg\n                          src={userDetails.profile_picture_url}\n                          className=\"c-avatar-img\"\n                          alt=\"admin@bootstrapmaster.com\"\n                          style={{\n                            marginBottom: \"2rem\",\n                            width: \"6rem\",\n                            height: \"6rem\",\n                          }}\n                        />\n                        <br />\n                        <span\n                          style={{\n                            fontSize: \"18px\",\n                            fontWeight: \"bold\",\n                          }}\n                        >\n                          Profile Picture\n                        </span>\n                      </>\n                    ) : (\n                      <DefaultUser style={{ marginBottom: \"2rem\" }} />\n                    )}\n                    <div style={{ marginLeft: \"140px\" }}>\n                      <CInputFile\n                        name=\"profile_picture_url\"\n                        type=\"file\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          formik.setFieldValue(\"profile_picture_url\", \"\");\n\n                          if (\n                            e.target.files[0].type !== \"image/png\" &&\n                            e.target.files[0].type !== \"image/jpeg\"\n                          ) {\n                            setShowError(\"Only jpeg, png images are allowed\");\n                            return;\n                          }\n                          setShowError(null);\n                          handleProfileChange(e.target.files[0]);\n                        }}\n                      />\n                      {showError ? (\n                        <div className=\"email-validate\">{showError}</div>\n                      ) : null}\n                    </div>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter User Name</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.name && formik.errors.name ? (\n                      <div className=\"email-validate\">{formik.errors.name}</div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Email</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"email\"\n                      disabled=\"true\"\n                      name=\"email\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.email}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.email && formik.errors.email ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.email}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Mobile Number</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"phone_no\"\n                      name=\"phone_no\"\n                      disabled=\"true\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.phone_no}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.phone_no && formik.errors.phone_no ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.phone_no}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CCardFooter\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-around\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  {loading ? (\n                    <div className=\"spinner-border text-success\" role=\"status\">\n                      <span className=\"sr-only\">Loading...</span>\n                    </div>\n                  ) : (\n                    <CButton\n                      type=\"submit\"\n                      style={{ width: \"5rem\" }}\n                      color=\"success\"\n                    >\n                      {params.id ? (\n                        <strong>Update</strong>\n                      ) : (\n                        <strong>Add</strong>\n                      )}\n                    </CButton>\n                  )}\n\n                  <CButton\n                    style={{ width: \"5rem\" }}\n                    color=\"danger\"\n                    onClick={() => history.goBack()}\n                  >\n                    <strong>Cancel</strong>\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        ) : (\n          <CCard>\n            <CCardHeader style={{ fontFamily: \"Lato\" }}>\n              <h3>\n                <strong>Add User Details</strong>\n              </h3>\n            </CCardHeader>\n            <CCardBody style={{ fontFamily: \"Roboto\" }}>\n              <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\n                <CFormGroup row>\n                  <CCol>\n                    <DefaultUser\n                      style={{ marginBottom: \"2rem\", marginLeft: \"168px\" }}\n                    />\n                    <div style={{ marginLeft: \"150px\" }}>\n                      <CInputFile\n                        name=\"profile_picture_url\"\n                        type=\"file\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          formik.setFieldValue(\"profile_picture_url\", \"\");\n\n                          if (\n                            e.target.files[0].type !== \"image/png\" &&\n                            e.target.files[0].type !== \"image/jpeg\"\n                          ) {\n                            setShowError(\"Only jpeg, png images are allowed\");\n                            return;\n                          }\n                          setShowError(null);\n                          handleProfileChange(e.target.files[0]);\n                        }}\n                      />\n                      {showError ? (\n                        <div className=\"email-validate\">{showError}</div>\n                      ) : null}\n                    </div>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter User Name</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.name && formik.errors.name ? (\n                      <div className=\"email-validate\">{formik.errors.name}</div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Email</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"email\"\n                      name=\"email\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.email}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.email && formik.errors.email ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.email}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Mobile Number</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"country_code\"\n                      name=\"country_code\"\n                      placeholder=\"code\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.country_code}\n                      onChange={formik.handleChange}\n                      style={{ marginBottom: \"5px\", width: \"30%\" }}\n                    />\n                    {formik.touched.country_code &&\n                    formik.errors.country_code ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.country_code}\n                      </div>\n                    ) : null}\n                    <CInput\n                      type=\"text\"\n                      id=\"phone_no\"\n                      name=\"phone_no\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.phone_no}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.phone_no && formik.errors.phone_no ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.phone_no}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CCardFooter\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-around\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  {loading ? (\n                    <div className=\"spinner-border text-success\" role=\"status\">\n                      <span className=\"sr-only\">Loading...</span>\n                    </div>\n                  ) : (\n                    <CButton\n                      type=\"submit\"\n                      style={{ width: \"5rem\" }}\n                      color=\"success\"\n                    >\n                      {userDetails.name ? (\n                        <strong>Update</strong>\n                      ) : (\n                        <strong>Add</strong>\n                      )}\n                    </CButton>\n                  )}\n\n                  <CButton\n                    style={{ width: \"5rem\" }}\n                    color=\"danger\"\n                    onClick={() => history.goBack()}\n                  >\n                    <strong>Cancel</strong>\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        )}\n      </CCol>\n    </CContainer>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/editStaticContent/editStaticContent.js",["271","272","273","274"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport {\n  getStaticContentDetails,\n  updateStaticContent,\n  uploadImage,\n  getFileContent,\n} from \"../../../api\";\nimport Loader from \"../../../globalComponent/loader\";\nimport { CButton } from \"@coreui/react\";\nimport StaticContentFrame from \"../getFrame\";\nimport apiConstant from \"src/apiConstants\";\n\nconst EditStaticContent = () => {\n  const history = useHistory();\n  const params = useParams();\n  const [staticContentDetails, setStaticContentDetails] = useState(null);\n  let [srcURL, setSrcURL] = useState(null);\n\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  const [image_url, setImage_url] = useState(null);\n  const [filename, setFilename] = useState(null);\n\n  useEffect(() => {\n    const getContent = async () => {\n      try {\n        getStaticContentDetails(Number(params.id)).then((data) => {\n          \n          setStaticContentDetails(data.staticContentDetails);\n          setSrcURL(`${apiConstant.baseURL}/${apiConstant.getTextFromHTML}?file_url=${data.staticContentDetails.page_url}`)\n          \n          \n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getContent();\n  }, []);\n\n  const handleUploadFile = async (e) => {\n    setFilename(e.target.files[0].name);\n\n    const bodyFormData = new FormData();\n    bodyFormData.append(\"image\", e.target.files[0], e.target.files[0].name);\n    bodyFormData.append(\"folderName\", \"other\");\n    try {\n      const res = await uploadImage(bodyFormData);\n      if (res.status == 200) {\n        setError(null);\n        updateContent(res.data.image_url);\n        setImage_url(res.data.image_url);\n      }\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  \n\n  const updateContent = (url) => {\n    try {\n      setSrcURL(`${apiConstant.baseURL}/${apiConstant.getTextFromHTML}?file_url=${url}`)\n          \n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmitUpdatedFile = async () => {\n    \n    let data = {\n      content_id: params.id,\n      page_url:image_url,\n    }\n    try {\n      const res = await updateStaticContent(data);\n      if (res.status == 200) {\n        setSuccessMsg(\"Content updated successfully\");\n        setTimeout(() => {\n          history.push(\"/static\");\n        }, 1000);\n      }\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        {!staticContentDetails ? (\n          <Loader />\n        ) : (\n          <div\n            id=\"recipients\"\n            className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n          >\n            <br />\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmitUpdatedFile}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n            <br />\n            {error && (\n              <p\n                style={{\n                  color: \"red\",\n                  fontSize: \"20px\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                  marginTop: \"12px\",\n                }}\n              >\n                {error}\n              </p>\n            )}\n            {successMsg && (\n              <div\n                style={{\n                  backgroundColor: \"#9ACD32\",\n                  padding: \"10px\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  marginTop: \"24px\",\n                  width: \"fit-content\",\n                }}\n              >\n                {successMsg}\n              </div>\n            )}\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                height: \"610px\",\n              }}\n            >\n              <div className=\"flex \">\n                <h1 className=\"text-xl\">{staticContentDetails.title}</h1>\n              </div>\n              <div className=\"flex mt-10 \">\n                <div className=\"flex flex-col ml-40\">\n\n                    <StaticContentFrame srcURL={ srcURL}/>\n                    \n                  <div style={{ display: \"flex\" }}>\n                    <label for=\"upload\" className=\"w-24 block \">\n                      <div className=\"w-full px-2 py-1 ml-5 my-2 flex justify-around items-center bg-gray-400 rounded-lg text-white\">\n                        Upload File\n                        <input\n                          type=\"file\"\n                          onChange={handleUploadFile}\n                          id=\"upload\"\n                          style={{ display: \"none\", padding: \"10px\" }}\n                          accept=\".html\"\n                        />\n                      </div>\n                    </label>\n                    <span\n                      style={{\n                        color: \"red\",\n                        paddingTop: \"13px\",\n                        paddingLeft: \"10px\",\n                      }}\n                    >\n                      Upload file of type html\n                    </span>\n                    {filename && (\n                      <p\n                        style={{\n                          marginTop: \"12px\",\n                          fontSize: \"15px\",\n                          marginLeft: \"10px\",\n                        }}\n                      >\n                        {filename}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default EditStaticContent;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/viewStaticContent.js",["275"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { getStaticContentDetails, getFileContent } from \"../../../api\";\nimport { CButton } from \"@coreui/react\";\nimport StaticContentFrame from \"../getFrame\";\nimport apiConstant from \"src/apiConstants\";\nconst ViewStaticContent = () => {\n  const history = useHistory();\n  const params = useParams();\n\n  const [staticContentDetails, setStaticContentDetails] = useState([]);\nlet [srcURL, setSrcURL] = useState(null); \n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        getStaticContentDetails(Number(params.id)).then((data) => {\n          setStaticContentDetails(data.staticContentDetails);\n          setSrcURL(`${apiConstant.baseURL}/${apiConstant.getTextFromHTML}?file_url=${data.staticContentDetails.page_url}`)\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getDetails();\n  }, [params.id]);\n\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        {staticContentDetails && (\n          <div\n            id=\"recipients\"\n            className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n          >\n            <br />\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.push(`/editStaticContent/${params.id}`)}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Edit\n            </CButton>\n\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                width: \"100%\",\n              }}\n            >\n              <div className=\"flex \">\n                <h1 className=\"text-xl\">{staticContentDetails.title}</h1>\n              </div>\n\n              <div className=\"flex mt-10 \">\n                <div className=\"flex flex-col ml-40\">\n                  <br />\n                  <StaticContentFrame srcURL={ srcURL}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ViewStaticContent;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/editAdmin.js",["276","277","278"],"import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CInputFile,\n  CTextarea,\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CModalBody,\n  CModalTitle,\n  CImg,\n} from \"@coreui/react\";\n\nimport { useFormik } from \"formik\";\nimport { UpdateProfile, uploadImage } from \"../../api\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { updateEmail } from \"../../reusable/validations/loginValidations\";\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\n\nexport default function EditAdmin() {\n  const location = useLocation();\n  const history = useHistory();\n  if (!location.state) {\n    history.push(\"/profile\");\n  }\n\n  const userId = useSelector((state) => state.auth.userId);\n  const update = useSelector((state) => state.sidebar.updatePic);\n  const [emailModal, setEmailModal] = useState(false);\n  const [phoneModal, setPhoneModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [showError, setShowError] = useState(\"\");\n  const [image, setImage] = useState({});\n\n  console.log(\"location\", location.state);\n\n  const formdata = new FormData();\n\n  const initialValues = {\n    name: location.state ? location.state.data.name : \"\",\n    email: location.state ? location.state.data.email : \"\",\n    profile_picture_url: location.state\n      ? location.state.data.profile_picture_url\n      : \"\",\n    newemail: location.state ? location.state.data.email : \"\",\n    phone:\n      location.state && location.state.data.phone_no\n        ? location.state.data.phone_no\n        : \"\",\n    newPhone:\n      location.state && location.state.data.phoneNumber\n        ? location.state.data.phoneNumber\n        : \"\",\n  };\n\n  const handleProfileChange = async (image) => {\n    setImage(image);\n  };\n\n  const onSubmit = async (values) => {\n    let bodyFormData = {};\n    formdata.append(\"image\", image, image.name);\n    formdata.append(\"folderName\", \"user\");\n    try {\n      const res = await uploadImage(formdata);\n      if (res.status == 200) {\n        bodyFormData.profile_picture_url = res.data.image_url;\n      }\n\n      bodyFormData.name = values.name;\n\n      try {\n        setLoading(true);\n        const response = await UpdateProfile(bodyFormData);\n\n        update();\n\n        setLoading(false);\n\n        history.push({\n          pathname: `/profile`,\n          state: { data: response.message, type: \"edit\" },\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues,\n    onSubmit,\n    validationSchema: updateEmail,\n  });\n\n  const handleUpadteEmail = async (type) => {\n    setEmailModal(!emailModal);\n  };\n\n  return (\n    <CContainer\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <CCol lg=\"8\" md=\"6\">\n        <CModal\n          show={emailModal}\n          centered={true}\n          backdrop={false}\n          color=\"warning\"\n          onClose={setEmailModal}\n          style={{ fontFamily: \"Poppins\" }}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>Enter New Email Address</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CFormGroup row>\n              <CCol md=\"3\">\n                <CLabel htmlFor=\"hf-categorytype\">\n                  <h6>New Email:</h6>\n                </CLabel>\n              </CCol>\n              <CCol xs=\"12\" md=\"9\">\n                <CInput\n                  type=\"text\"\n                  id=\"newemail\"\n                  name=\"newemail\"\n                  onBlur={formik.handleBlur}\n                  value={formik.values.newemail}\n                  onChange={formik.handleChange}\n                />\n                {formik.touched.newemail && formik.errors.newemail ? (\n                  <div className=\"email-validate\">{formik.errors.newemail}</div>\n                ) : null}\n              </CCol>\n            </CFormGroup>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"success\" onClick={() => handleUpadteEmail(\"email\")}>\n              Yes\n            </CButton>\n            <CButton color=\"secondary\" onClick={() => setEmailModal(false)}>\n              Cancel\n            </CButton>\n          </CModalFooter>\n        </CModal>\n        <CModal\n          show={phoneModal}\n          centered={true}\n          backdrop={false}\n          color=\"warning\"\n          onClose={setPhoneModal}\n          style={{ fontFamily: \"Poppins\" }}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>Enter New Phone Number</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CFormGroup row>\n              <CCol md=\"3\">\n                <CLabel htmlFor=\"hf-categorytype\">\n                  <h6>New Phone:</h6>\n                </CLabel>\n              </CCol>\n              <CCol xs=\"12\" md=\"9\">\n                <CInput\n                  type=\"text\"\n                  id=\"newPhone\"\n                  name=\"newPhone\"\n                  onBlur={formik.handleBlur}\n                  value={formik.values.newPhone}\n                  onChange={formik.handleChange}\n                />\n                {formik.touched.newPhone && formik.errors.newPhone ? (\n                  <div className=\"email-validate\">{formik.errors.newPhone}</div>\n                ) : null}\n              </CCol>\n            </CFormGroup>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"success\" onClick={() => handleUpadteEmail(\"phone\")}>\n              Yes\n            </CButton>\n            <CButton color=\"secondary\" onClick={() => setPhoneModal(false)}>\n              Cancel\n            </CButton>\n          </CModalFooter>\n        </CModal>\n        <CCard>\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\n            <h3>\n              <strong>Edit Admin</strong>\n            </h3>\n          </CCardHeader>\n          <CCardBody style={{ fontFamily: \"Poppins\" }}>\n            <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"custom-file-input\">\n                    Update Profile Pic\n                  </CLabel>\n                </CCol>\n                <CCol xs=\"8\" md=\"6\">\n                  {initialValues.profile_picture_url ? (\n                    <>\n                      <CImg\n                        src={initialValues.profile_picture_url}\n                        className=\"c-avatar-img\"\n                        alt=\"\"\n                        style={{\n                          marginBottom: \"2rem\",\n                          width: \"6rem\",\n                          height: \"6rem\",\n                          paddingBottom: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                      />\n                    </>\n                  ) : (\n                    <DefaultUser style={{ marginBottom: \"2rem\" }} />\n                  )}\n                  <CInputFile\n                    name=\"profile_picture_url\"\n                    type=\"file\"\n                    className=\"hidden\"\n                    onChange={(e) => {\n                      formik.setFieldValue(\"profile_picture_url\", \"\");\n\n                      if (\n                        e.target.files[0].type !== \"image/png\" &&\n                        e.target.files[0].type !== \"image/jpeg\"\n                      ) {\n                        setShowError(\"Only jpeg, png images are allowed\");\n                        return;\n                      }\n                      setShowError(\"\");\n                      handleProfileChange(e.target.files[0]);\n                    }}\n                  />\n                  {showError ? (\n                    <div className=\"email-validate\">{showError}</div>\n                  ) : null}\n                </CCol>\n              </CFormGroup>\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"hf-category\">Admin Name</CLabel>\n                </CCol>\n                <CCol>\n                  <CInput\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    onBlur={formik.handleBlur}\n                    value={formik.values.name}\n                    onChange={formik.handleChange}\n                  />\n                  {formik.touched.name && formik.errors.name ? (\n                    <div className=\"email-validate\">{formik.errors.name}</div>\n                  ) : null}\n                </CCol>\n              </CFormGroup>\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"hf-categorytype\">Email Address</CLabel>\n                </CCol>\n                <CCol xs=\"12\" md=\"9\">\n                  <CInput\n                    type=\"text\"\n                    id=\"email\"\n                    disabled=\"true\"\n                    name=\"email\"\n                    onBlur={formik.handleBlur}\n                    value={formik.values.email}\n                    onChange={formik.handleChange}\n                  />\n                  {/* <CButton\n                    onClick={() => setEmailModal(!emailModal)}\n                    style={{ color: \"white\", marginTop: \"1rem\", width: \"8rem\" }}\n                    color=\"warning\"\n                  >\n                    Update Email\n                  </CButton> */}\n                </CCol>\n              </CFormGroup>\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"hf-categorytype\">Phone Number</CLabel>\n                </CCol>\n                <CCol xs=\"12\" md=\"9\">\n                  <CInput\n                    id=\"phone\"\n                    disabled=\"true\"\n                    name=\"phone\"\n                    onBlur={formik.handleBlur}\n                    value={formik.values.phone}\n                    onChange={formik.handleChange}\n                  />\n                  {/* <CButton\n                    onClick={() => setPhoneModal(!phoneModal)}\n                    style={{ color: \"white\", marginTop: \"1rem\", width: \"8rem\" }}\n                    color=\"warning\"\n                  >\n                    Update Phone\n                  </CButton> */}\n                </CCol>\n              </CFormGroup>\n              <CCardFooter\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-around\",\n                  alignItems: \"center\",\n                }}\n              >\n                <CButton\n                  onClick={() => history.push(\"/profile\")}\n                  style={{ width: \"5rem\" }}\n                  type=\"reset\"\n                  color=\"danger\"\n                >\n                  <strong>Cancel</strong>\n                </CButton>\n                {loading ? (\n                  <div className=\"spinner-border text-success\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                  </div>\n                ) : (\n                  <CButton\n                    type=\"submit\"\n                    color=\"success\"\n                    style={{ width: \"5rem\" }}\n                  >\n                    <strong>Update</strong>\n                  </CButton>\n                )}\n              </CCardFooter>\n              <CCardFooter>\n                <CCol style={{ textAlign: \"center\", margin: \"10px\" }}>\n                  <CButton\n                    color=\"primary\"\n                    onClick={() => history.push(\"/changePassword\")}\n                  >\n                    <strong>Change Password</strong>\n                  </CButton>\n                </CCol>\n              </CCardFooter>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CContainer>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/adminProfile.js",["279"],"import React, { useEffect, useState } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CImg,\n  CCardHeader,\n  CButton,\n  CModal,\n  CModalHeader,\n} from \"@coreui/react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { GetUserProfile } from \"../../api\";\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\n\nexport default function AdminProfile() {\n  const history = useHistory();\n  const location = useLocation();\n  const userId = useSelector((state) => state.auth.userId);\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const res = await GetUserProfile();\n        setUserData(res);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getData();\n  }, []);\n\n  return userData ? (\n    <CRow alignHorizontal=\"center\" alignVertical=\"center\">\n      <CCol xl>\n        <CModal\n          show={location.state ? true : false}\n          size={location.state && location.state.type === \"edit\" ? \"sm\" : \"\"}\n          backdrop={false}\n          color=\"warning\"\n        >\n          <CModalHeader closeButton>\n            {/* <CModalTitle>Block User Account?</CModalTitle> */}\n            {location.state && location.state.data ? location.state.data : \"\"}\n          </CModalHeader>\n        </CModal>\n        <CCard>\n          <CCardHeader\n            style={{\n              fontFamily: \"Lato\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <h2>\n              <strong>Admin Profile</strong>\n            </h2>\n            <CButton\n              style={{ width: \"8rem\" }}\n              color=\"success\"\n              onClick={() =>\n                history.push({\n                  pathname: \"./editAdmin\",\n                  state: { data: userData },\n                })\n              }\n            >\n              <strong>Edit Profile</strong>\n            </CButton>\n          </CCardHeader>\n          <CCardBody\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            {userData.profile_picture_url ? (\n              <CImg\n                src={userData.profile_picture_url}\n                className=\"c-avatar-img\"\n                alt=\"\"\n                style={{ marginBottom: \"2rem\", width: \"6rem\", height: \"6rem\" }}\n              />\n            ) : (\n              <DefaultUser style={{ marginBottom: \"2rem\" }} />\n            )}\n\n            <table className=\"table table-striped table-hover\">\n              <tbody style={{ fontFamily: \"Poppins\" }}>\n                <tr\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"flex-start\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <td style={{ marginLeft: \"8rem\" }}>\n                    <strong>Name</strong>\n                  </td>\n                  <td style={{ marginLeft: \"9.8rem\" }}>\n                    <>{userData[\"name\"] ? String(userData[\"name\"]) : \"\"}</>\n                  </td>\n                </tr>\n                <tr\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"flex-start\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <td style={{ marginLeft: \"8rem\" }}>\n                    <strong>Email</strong>\n                  </td>\n                  <td style={{ marginLeft: \"9.8rem\" }}>\n                    <>{userData[\"email\"] ? String(userData[\"email\"]) : \"\"}</>\n                  </td>\n                </tr>\n                <tr\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"flex-start\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <td style={{ marginLeft: \"8rem\" }}>\n                    <strong>Phone Number</strong>\n                  </td>\n                  <td style={{ marginLeft: \"5.6rem\" }}>\n                    <>\n                      {userData[\"phone_no\"] ? String(userData[\"phone_no\"]) : \"\"}\n                    </>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  ) : null;\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/changePassword/changePassword.js",["280"],"import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CModal,\n  CInputGroupAppend,\n  CModalHeader,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useFormik } from \"formik\";\nimport { ChangePasswordValidation } from \"../../reusable/validations/loginValidations\";\nimport { ChangePasswordApi } from \"../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport { useSelector } from \"react-redux\";\n\nconst initialValues = {\n  oldpassword: \"\",\n  newpassword: \"\",\n  confirmpassword: \"\",\n  error: \"\",\n};\n\nexport default function ChangePassword() {\n  const [showpass, setShowPass] = useState(\"password\");\n  const [showpass2, setShowPass2] = useState(\"password\");\n  const [showpass3, setShowPass3] = useState(\"password\");\n\n  const [loading, setLoading] = useState(false);\n  const [modal, setModal] = useState(false);\n  const auth = useSelector((state) => state.auth);\n\n  const history = useHistory();\n\n  const onSubmit = async (values, actions) => {\n    setLoading(true);\n    let formData = {};\n    formData.old_password = values.oldpassword;\n    formData.new_password = values.newpassword;\n    formData.confirm_new_password = values.confirmpassword;\n    try {\n      const result = await ChangePasswordApi(formData);\n      if (result) {\n        setModal(!modal);\n        setLoading(false);\n        history.push(\"/login\");\n      }\n    } catch (error) {\n      setLoading(false);\n      actions.setFieldError(\"error\", error);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: ChangePasswordValidation,\n    onSubmit,\n  });\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CModal\n          show={modal}\n          backdrop={false}\n          color=\"warning\"\n          onClose={setModal}\n        >\n          <CModalHeader closeButton>Password Changed Successfully</CModalHeader>\n        </CModal>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={formik.handleSubmit}>\n                    <h1 style={{ marginBottom: \"25px\" }}>Change Password</h1>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type={showpass}\n                        placeholder=\"Old Password\"\n                        autoComplete=\"current-password\"\n                        name=\"oldpassword\"\n                        onBlur={formik.handleBlur}\n                        value={formik.values.oldPassword}\n                        onChange={formik.handleChange}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText\n                          onClick={() => {\n                            if (showpass === \"password\") {\n                              setShowPass(\"text\");\n                            } else {\n                              setShowPass(\"password\");\n                            }\n                          }}\n                        >\n                          <FontAwesomeIcon\n                            color=\"blue\"\n                            size=\"sm\"\n                            icon={showpass !== \"password\" ? faEye : faEyeSlash}\n                          />{\" \"}\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                    {formik.touched.oldpassword && formik.errors.oldpassword ? (\n                      <div\n                        className=\"email-validate\"\n                        style={{ marginTop: \"-1.5rem\" }}\n                      >\n                        {formik.errors.oldpassword}\n                      </div>\n                    ) : null}\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type={showpass2}\n                        placeholder=\"New Password\"\n                        autoComplete=\"current-password\"\n                        name=\"newpassword\"\n                        onBlur={formik.handleBlur}\n                        value={formik.values.newPassword}\n                        onChange={formik.handleChange}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText\n                          onClick={() => {\n                            if (showpass2 === \"password\") {\n                              setShowPass2(\"text\");\n                            } else {\n                              setShowPass2(\"password\");\n                            }\n                          }}\n                        >\n                          <FontAwesomeIcon\n                            color=\"blue\"\n                            size=\"sm\"\n                            icon={showpass2 !== \"password\" ? faEye : faEyeSlash}\n                          />{\" \"}\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                    {formik.touched.newpassword && formik.errors.newpassword ? (\n                      <div\n                        className=\"email-validate\"\n                        style={{ marginTop: \"-1.5rem\" }}\n                      >\n                        {formik.errors.newpassword}\n                      </div>\n                    ) : null}\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type={showpass3}\n                        placeholder=\"confirm new Password\"\n                        autoComplete=\"current-password\"\n                        name=\"confirmpassword\"\n                        onBlur={formik.handleBlur}\n                        value={formik.values.confirmpassword}\n                        onChange={formik.handleChange}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText\n                          onClick={() => {\n                            if (showpass3 === \"password\") {\n                              setShowPass3(\"text\");\n                            } else {\n                              setShowPass3(\"password\");\n                            }\n                          }}\n                        >\n                          <FontAwesomeIcon\n                            color=\"blue\"\n                            size=\"sm\"\n                            icon={showpass3 !== \"password\" ? faEye : faEyeSlash}\n                          />{\" \"}\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                    {formik.touched.confirmpassword &&\n                    formik.errors.confirmpassword ? (\n                      <div\n                        className=\"email-validate\"\n                        style={{ marginTop: \"-1.5rem\" }}\n                      >\n                        {formik.errors.confirmpassword}\n                      </div>\n                    ) : null}\n                    {formik.errors.error ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.error}\n                      </div>\n                    ) : null}\n                    <CRow>\n                      <CCol xs=\"10\" style={{ marginRight: \"5px\" }}>\n                        {!loading ? (\n                          <CButton\n                            color=\"danger\"\n                            className=\"px-6\"\n                            onClick={() => history.goBack()}\n                          >\n                            Cancel\n                          </CButton>\n                        ) : (\n                          <div\n                            className=\"spinner-border text-primary\"\n                            role=\"status\"\n                          >\n                            <span className=\"sr-only\">Loading...</span>\n                          </div>\n                        )}\n                      </CCol>\n                      <CCol>\n                        {!loading ? (\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            type=\"submit\"\n                          >\n                            Update\n                          </CButton>\n                        ) : (\n                          <div\n                            className=\"spinner-border text-primary\"\n                            role=\"status\"\n                          >\n                            <span className=\"sr-only\">Loading...</span>\n                          </div>\n                        )}\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/addRecipe.js",["281","282","283","284"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CTextarea,\n  CInputFile,\n  CSelect,\n} from \"@coreui/react\";\n\nimport { uploadImage, SavePost, EditPost, GetRecipeDetail } from \"../../api\";\nimport { useLocation, useHistory, useParams } from \"react-router-dom\";\nimport FormData from \"form-data\";\n\nexport default function AddRecipe() {\n  const location = useLocation();\n  const history = useHistory();\n  const params = useParams();\n\n  var phase = [\n    {\n      label: \"kisckstart\",\n      value: 1,\n    },\n    {\n      label: \"phase 1\",\n      value: 2,\n    },\n\n    {\n      label: \"phase 2\",\n      value: 3,\n    },\n    {\n      label: \"phase 3\",\n      value: 4,\n    },\n    {\n      label: \"phase 4\",\n      value: 5,\n    },\n    {\n      label: \"phase 4 eva\",\n      value: 6,\n    },\n  ];\n\n  const [recipeType, setRecipeType] = useState(null);\n  const [disable, setDisable] = useState(false);\n\n  const [show, setShow] = useState({\n    phase_id: \"\",\n    recipe_image_url: \"\",\n    recipe_title: \"\",\n    recipe_ingredients: \"\",\n    recipe_methods: \"\",\n  });\n\n  const [error, setError] = useState({\n    phase_id: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_image_url: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_title: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_ingredients: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_methods: {\n      error: \"\",\n      blur: \"\",\n    },\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const GetRecipe = async () => {\n      try {\n        const result = await GetRecipeDetail(params.id);\n        if (result) {\n          setShow(result.recipeDetails);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    GetRecipe();\n  }, [params.id]);\n\n  const validateForm = () => {\n    let valid = true;\n    let showPhase = \"\";\n    let showTitle = \"\";\n    let showIng = \"\";\n    let showMethod = \"\";\n    if (show.phase_id === \"none\" || show.phase_id === \"\") {\n      valid = false;\n      showPhase = \"Please select Phase\";\n    }\n    if (show.recipe_ingredients === \"\") {\n      valid = false;\n      showIng = \"Please enter Recipe Ingredients\";\n    }\n    if (show.recipe_methods === \"\") {\n      valid = false;\n      showMethod = \"Please enter Recipe Methods\";\n    }\n    if (show.recipe_title === \"\") {\n      valid = false;\n      showTitle = \"Please enter Recipe Title\";\n    }\n    setError({\n      ...error,\n      recipe_title: { ...error.recipe_title, error: showTitle },\n      recipe_ingredients: {\n        ...error.recipe_ingredients,\n        error: showIng,\n      },\n      recipe_methods: {\n        ...error.recipe_methods,\n        error: showMethod,\n      },\n      phase_id: { ...error.phase_id, error: showPhase },\n    });\n\n    return valid;\n  };\n\n  const showFile = async (event) => {\n    event.preventDefault();\n\n    if (event.target.files.length < 1) {\n      return;\n    }\n    setError({\n      ...error,\n      recipe_image_url: { ...error.recipe_image_url, error: \"\" },\n    });\n\n    if (\n      event.target.files[0].type !== \"image/png\" &&\n      event.target.files[0].type !== \"image/jpeg\"\n    ) {\n      setError({\n        ...error,\n        recipe_image_url: {\n          ...error.recipe_image_url,\n          error: \"Only jpeg, png images are allowed\",\n        },\n      });\n      return;\n    }\n\n    var image = event.target.files[0];\n    var data = new FormData();\n    data.append(\"image\", image, image.name);\n    data.append(\"folderName\", \"recipe\");\n\n    try {\n      setDisable(true);\n      const result = await uploadImage(data);\n      if (result) {\n        setDisable(false);\n        setShow({ ...show, recipe_image_url: result.data.recipe_image_url });\n      }\n    } catch (error) {\n      console.log(error);\n      setError({\n        ...error,\n        recipe_image_url: { ...error.recipe_image_url, error: error },\n      });\n    }\n  };\n\n  const handleTitleChange = (e) => {\n    setError({ ...error, recipe_title: { ...error.recipe_title, error: \"\" } });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_title: {\n          ...error.recipe_title,\n          error: \"Please enter Recipe Title\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_title: e.target.value });\n  };\n\n  const handleDescriptionChange = (e) => {\n    setError({\n      ...error,\n      recipe_ingredients: { ...error.recipe_ingredients, error: \"\" },\n    });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_ingredients: {\n          ...error.recipe_ingredients,\n          error: \"Please enter Recipe Ingredients\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_ingredients: e.target.value });\n  };\n\n  const handleMethodsChange = (e) => {\n    setError({\n      ...error,\n      recipe_methods: { ...error.recipe_methods, error: \"\" },\n    });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_methods: {\n          ...error.recipe_methods,\n          error: \"Please enter a Description\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_methods: e.target.value });\n  };\n  const handleCategoryIdChange = (e) => {\n    setError({\n      ...error,\n      phase_id: { ...error.phase_id, error: \"\" },\n    });\n\n    if (e.target.value === \"none\") {\n      setError({\n        ...error,\n        phase_id: {\n          ...error.phase_id,\n          error: \"Please enter a Phase\",\n        },\n      });\n    }\n    setShow({ ...show, phase_id: e.target.value });\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    if (params.id) {\n      const body = {\n        phase_id: Number(show.phase_id),\n        recipe_image_url: show.recipe_image_url,\n        recipe_title: show.recipe_title,\n        recipe_ingredients: show.recipe_ingredients,\n        recipe_methods: show.recipe_methods,\n        recipe_type: recipeType ? recipeType : show.recipe_type,\n      };\n      try {\n        setLoading(true);\n        const response = await EditPost(params.id, body);\n        setLoading(false);\n        if (response) {\n          history.push(\"/recipeManagement\");\n        }\n      } catch (error) {\n        setLoading(false);\n        console.log(error);\n      }\n    } else {\n      const body = {\n        phase_id: Number(show.phase_id),\n        recipe_image_url: show.recipe_image_url,\n        recipe_title: show.recipe_title,\n        recipe_ingredients: show.recipe_ingredients,\n        recipe_methods: show.recipe_methods,\n        recipe_type: recipeType,\n      };\n      try {\n        setLoading(true);\n        const response = await SavePost(body);\n        setLoading(false);\n        if (response) {\n          history.push(\"/recipeManagement\");\n        }\n      } catch (error) {\n        setLoading(false);\n        console.log(error);\n      }\n    }\n  };\n\n  const handleRecipeType = (type) => {\n    setRecipeType(type);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <CContainer\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {\n          <CCol xl=\"10\" md=\"10\">\n            <CCard>\n              <CCardHeader style={{ fontFamily: \"Lato\" }}>\n                <h3>\n                  {location.state ? (\n                    <strong>Edit Recipe</strong>\n                  ) : (\n                    <strong>Add Recipe</strong>\n                  )}\n                </h3>\n              </CCardHeader>\n\n              <CCardBody\n                style={{\n                  fontFamily: \"Roboto\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div className=\"form-horizontal\">\n                  <div style={{ margin: \"auto\" }}>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel>\n                          <h6>\n                            <strong>Enter Recipe Title:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CInput\n                          type=\"text\"\n                          id=\"recipe_title\"\n                          name=\"recipe_title\"\n                          value={show.recipe_title}\n                          onChange={(e) => handleTitleChange(e)}\n                          onBlur={handleTitleChange}\n                        />\n                        {error.recipe_title.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_title.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"hf-recipe_image_url\">\n                          <h6>\n                            <strong>Upload Recipe Image:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CInputFile\n                          id=\"recipe_image_url\"\n                          name=\"recipe_image_url\"\n                          type=\"file\"\n                          onChange={(e) => {\n                            const id = `recipe_image_url`;\n                            showFile(e);\n                          }}\n                        />\n                        <div>Please upload 100*100 resolution image</div>\n                        {error.recipe_image_url.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_image_url.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel\n                          style={{ fontFamily: \"Poppins\" }}\n                          htmlFor=\"textarea-input\"\n                        >\n                          <h6>\n                            <strong>Enter Recipe Ingredients:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"4\" md=\"9\">\n                        <CTextarea\n                          type=\"text\"\n                          id=\"recipe_ingredients\"\n                          name=\"recipe_ingredients\"\n                          onBlur={handleDescriptionChange}\n                          value={show.recipe_ingredients}\n                          onChange={handleDescriptionChange}\n                          rows=\"6\"\n                        />\n                        {error.recipe_ingredients.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_ingredients.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel\n                          style={{ fontFamily: \"Poppins\" }}\n                          htmlFor=\"textarea-input\"\n                        >\n                          <h6>\n                            <strong>Enter Recipe Methods:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"4\" md=\"9\">\n                        <CTextarea\n                          type=\"text\"\n                          id=\"recipe_methods\"\n                          name=\"recipe_methods\"\n                          onBlur={handleMethodsChange}\n                          value={show.recipe_methods}\n                          onChange={handleMethodsChange}\n                          rows=\"6\"\n                        />\n                        {error.recipe_methods.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_methods.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"recipe_type\">\n                          <h6>Recipe type?</h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol row md=\"3\">\n                        <label for={1}>\n                          <CInput\n                            type=\"radio\"\n                            id={1}\n                            formControlName=\"recipe_type\"\n                            checked={show.recipe_type == 1 ? \"checked\" : \"\"}\n                            style={{\n                              width: \"60%\",\n                              marginTop: \"-7px\",\n                              outline: \"none !important\",\n                            }}\n                            onChange={() => {\n                              handleRecipeType(1);\n                            }}\n                          />\n                          Veg\n                        </label>\n                      </CCol>\n                      <CCol row md=\"3\">\n                        <label for={2}>\n                          <CInput\n                            type=\"radio\"\n                            id={2}\n                            formControlName=\"recipe_type\"\n                            checked={show.recipe_type == 2 ? \"checked\" : \"\"}\n                            value={show.recipe_type}\n                            style={{ width: \"28%\", marginTop: \"-7px\" }}\n                            onChange={() => {\n                              handleRecipeType(2);\n                            }}\n                          />\n                          Non Veg\n                        </label>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"hf-category\">\n                          <h6>\n                            <strong>Phase</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CSelect\n                          value={show.phase_id}\n                          onChange={handleCategoryIdChange}\n                          onBlur={handleCategoryIdChange}\n                          custom\n                          name=\"phase_id\"\n                          id=\"phase_id\"\n                          options={phase}\n                        >\n                          <option value=\"none\">Select Phase</option>\n                          {phase.map((item, index) => (\n                            <option key={index} value={item.value}>\n                              {item.label}\n                            </option>\n                          ))}\n                        </CSelect>\n                        {error.phase_id.error && (\n                          <div className=\"email-validate\">\n                            {error.phase_id.error}\n                          </div>\n                        )}\n                        {/* {formik.touched.categoryTypeId && formik.errors.categoryTypeId ? <div className=\"email-validate\">{formik.errors.categoryTypeId}</div> : null} */}\n                      </CCol>\n                    </CFormGroup>\n                  </div>\n                  <div style={{ textAlign: \"-webkit-center\" }}>\n                    {loading ? (\n                      <div\n                        className=\"spinner-border text-success\"\n                        role=\"status\"\n                      >\n                        <span className=\"sr-only\">Loading...</span>\n                      </div>\n                    ) : (\n                      <CButton\n                        // disabled={disable}\n                        type=\"submit\"\n                        name=\"submit\"\n                        color=\"success\"\n                        style={{ width: \"75px\" }}\n                      >\n                        Save\n                      </CButton>\n                    )}\n                    <CButton\n                      style={{ width: \"5rem\", marginLeft: \"2rem\" }}\n                      color=\"danger\"\n                      onClick={() => history.goBack()}\n                    >\n                      <strong>Cancel</strong>\n                    </CButton>\n                  </div>\n                </div>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        }\n      </CContainer>\n    </form>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/User.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/newUsers.js",["285"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/recipes.js",["286","287","288","289","290"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination,\n  CTooltip,\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CModalBody,\n  CButton,\n  CModalTitle,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CSelect,\n} from \"@coreui/react\";\nimport { freeSet } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport moment from \"moment\";\n\nimport { GetRecipeList, ChangeUserStatus, DeleteRecipe } from \"../../api\";\n\nconst getBadge = (status) => {\n  switch (status) {\n    case \"Active\":\n      return \"success\";\n    case \"Banned\":\n      return \"danger\";\n    default:\n      return \"primary\";\n  }\n};\n\nconst fields = [\n  { key: \"currentId\", label: \"Id\", _style: { fontFamily: \"Poppins\" } },\n  {\n    key: \"recipe_title\",\n    label: \"Recipe Title \",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"recipeType\",\n    label: \"Recipe Type\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"created_at\",\n    label: \"Posted Date\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"PostedBy\",\n    label: \"Posted By\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"show_details\",\n    label: \"Action\",\n    _style: { minWidth: \"7rem\" },\n    sorter: false,\n    filter: false,\n  },\n];\nconst Recipes = () => {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const queryPageSEarch = useLocation().search.match(\n    /search=([A-Za-z0-9 _]+)/,\n    \"\"\n  );\n\n  const currentPageSearch =\n    queryPageSEarch && queryPageSEarch[1] ? queryPageSEarch[1] : \"\";\n\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n\n  const [page, setPage] = useState(currentPage);\n\n  const [data, setData] = useState([]);\n  const [count, setCount] = useState();\n  const [userId, setUserId] = useState(null);\n  const [onsearchCHange, setOnSearchChange] = useState(\n    currentPageSearch ? currentPageSearch : \"\"\n  );\n  const [active, setActive] = useState(null);\n  const [enableModal, setEnableModal] = useState(false);\n  const [refresh, setRefresh] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [recipeType, setRecipeType] = useState(null);\n  let currentId = page && page * 10 - 10;\n\n  var recipe_type = [\n    {\n      label: \"Select recipe type\",\n      value: null,\n    },\n    {\n      label: \"Veg\",\n      value: 1,\n    },\n    {\n      label: \"Non Veg\",\n      value: 2,\n    },\n  ];\n\n  const pageChange = (newPage) => {\n    let newPage1 = newPage;\n    if (newPage1 === 0) {\n      newPage1 = 1;\n    }\n    currentPage !== newPage &&\n      history.push(`/users?search=${onsearchCHange}&page=${newPage1}`);\n  };\n\n  const toggleDelete = (id) => {\n    setUserId(id);\n    setDeleteModal(!deleteModal);\n  };\n\n  const handleEnable = async () => {\n    try {\n      setEnableModal(!enableModal);\n      let pass;\n      if (active) {\n        pass = 0;\n      } else {\n        pass = 1;\n      }\n      await ChangeUserStatus(userId, pass);\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      setDeleteModal(!deleteModal);\n      const deleteResult = await DeleteRecipe(userId);\n\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSearchChange = (e) => {\n    setOnSearchChange(e.target.value);\n  };\n\n  const handleSearch = async () => {\n    currentPageSearch !== onsearchCHange &&\n      history.push(`/recipeManagement?search=${onsearchCHange}&page=${page}`);\n  };\n\n  const handleReset = () => {\n    setOnSearchChange(\"\");\n    let newPage = page;\n    if (newPage === 0) {\n      newPage = 1;\n    }\n    history.push(`/recipeManagement?&page=${newPage}`);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        setData([]);\n        const data = recipeType\n          ? await GetRecipeList(\n              currentPage,\n              currentPageSearch,\n              Number(recipeType)\n            )\n          : await GetRecipeList(currentPage, currentPageSearch);\n        setLoading(false);\n        data.rows.map((item) => {\n          item._classes = \"catTableItem\";\n\n          if (item.created_at) {\n            item.created_at = moment(item.created_at).format(\"LLL\");\n          }\n          return item;\n        });\n\n        setData(data.rows);\n        setCount(data.count);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n\n    getData();\n\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, currentPageSearch, refresh, page, recipeType]);\n\n  return (\n    <CRow>\n      <CModal\n        show={enableModal}\n        centered={true}\n        color=\"warning\"\n        onClose={setEnableModal}\n        backdrop={true}\n        style={{ fontFamily: \"Poppins\" }}\n      >\n        <CModalHeader style={{ height: \"3rem\" }}>\n          <CModalTitle>{active ? \"Block User?\" : \"Unblock User?\"}</CModalTitle>\n        </CModalHeader>\n        <CModal\n          show={deleteModal}\n          centered={true}\n          backdrop={true}\n          color=\"warning\"\n          onClose={setDeleteModal}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>Delete Category Genre?</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            Are you sure you want to Delete this Category?\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"success\" onClick={handleDelete}>\n              Yes\n            </CButton>\n            <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n              Cancel\n            </CButton>\n          </CModalFooter>\n        </CModal>\n        <CModalBody>\n          {active\n            ? \"Are you sure you want to Block the User?\"\n            : \"Are you sure you want to Unblock the User?\"}\n        </CModalBody>\n        <CModalFooter style={{ height: \"4rem\" }}>\n          <CButton color=\"success\" onClick={handleEnable}>\n            Yes\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setEnableModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal\n        show={deleteModal}\n        centered={true}\n        backdrop={true}\n        color=\"warning\"\n        onClose={setDeleteModal}\n      >\n        <CModalHeader>\n          <CModalTitle>Delete Recipe?</CModalTitle>\n        </CModalHeader>\n        <CModalBody>Are you sure you want to Delete the Recipe?</CModalBody>\n        <CModalFooter>\n          <CButton color=\"primary\" onClick={handleDelete}>\n            Yes\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CCol xxl={12}>\n        <CCard>\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\n            <h2>\n              <strong>Recipe Management</strong>\n            </h2>\n            <CButton\n              style={{ width: \"5rem\", marginLeft: \"90%\" }}\n              color=\"success\"\n              onClick={() => history.push(\"/addRecipe\")}\n            >\n              <strong>Add</strong>\n            </CButton>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={data}\n              fields={fields}\n              hover\n              border\n              addTableClasses=\"table-class\"\n              striped\n              loading={loading}\n              noItemsViewSlot={\n                !loading ? \"\" : <div style={{ height: \"14rem\" }}></div>\n              }\n              clickableRows\n              overTableSlot={\n                <CCol style={{ marginBottom: \"1rem\", display: \"flex\" }}>\n                  <CInputGroup>\n                    <CInputGroupPrepend>\n                      <CInputGroupText\n                        style={{ backgroundColor: \"#0D86FF\", color: \"white\" }}\n                      >\n                        <CIcon content={freeSet.cilSearch} />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      style={{ maxWidth: \"15rem\" }}\n                      value={onsearchCHange}\n                      onChange={handleSearchChange}\n                      id=\"input1-group1\"\n                      name=\"input1-group1\"\n                      placeholder=\"Search by Recipe Title\"\n                    />\n\n                    <CButton\n                      onClick={handleSearch}\n                      style={{ marginLeft: \"1rem\" }}\n                      color=\"info\"\n                    >\n                      Search\n                    </CButton>\n                    <CButton\n                      onClick={() => {\n                        handleReset();\n                      }}\n                      style={{ marginLeft: \"1rem\" }}\n                      color=\"info\"\n                    >\n                      Reset\n                    </CButton>\n                  </CInputGroup>\n                  <CInputGroup style={{ width: \"30%\" }}>\n                    <CSelect\n                      onChange={(e) => {\n                        setRecipeType(e.target.value);\n                      }}\n                      custom\n                      value={recipeType}\n                      name=\"recipe_type\"\n                      id=\"recipe_type\"\n                    >\n                      {recipe_type.map((item) => (\n                        <option key={item.value} value={item.value}>\n                          {item.label}\n                        </option>\n                      ))}\n                    </CSelect>\n                  </CInputGroup>\n                </CCol>\n              }\n              underTableSlot={\n                <div style={{ marginBottom: \"1rem\" }}>\n                  Showing {page * 10 - 9}-\n                  {page * 10 < data.length ? page * 10 : data.length} of{\" \"}\n                  {data.length}\n                </div>\n              }\n              scopedSlots={{\n                currentId: (item) => {\n                  currentId++;\n                  return <td>{currentId}</td>;\n                },\n                email: (item) => <td>{item.email}</td>,\n                PostedBy: (item) => (\n                  <td>\n                    {item.role == 1\n                      ? `App user : ${item.name}`\n                      : `Admin : ${item.name}`}\n                  </td>\n                ),\n                recipeType: (item) => (\n                  <td>{item.recipe_type == 1 ? \"Veg\" : \"Non Veg\"}</td>\n                ),\n                status: (item) => (\n                  <td>\n                    {item.status == 1 ? (\n                      <CBadge\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\n                        shape=\"pill\"\n                        color={getBadge(\"Active\")}\n                      >\n                        Active\n                      </CBadge>\n                    ) : (\n                      <CBadge\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\n                        shape=\"pill\"\n                        color={getBadge(\"Banned\")}\n                      >\n                        Blocked\n                      </CBadge>\n                    )}\n                  </td>\n                ),\n                show_details: (item) => {\n                  return (\n                    <td>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-around\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        <CTooltip\n                          content={\"Edit Recipe\"}\n                          placement={\"top-start\"}\n                        >\n                          <CIcon\n                            onClick={() =>\n                              history.push({\n                                pathname: `/addRecipe/${item.id}`,\n                                state: { item },\n                              })\n                            }\n                            style={{ color: \"red\", cursor: \"pointer\" }}\n                            size=\"lg\"\n                            content={freeSet.cilPencil}\n                          />\n                        </CTooltip>\n                        <CTooltip\n                          content={`Delete Recipe\n                          `}\n                          placement={\"top-start\"}\n                          interactive={true}\n                          trigger=\"mouseenter\"\n                        >\n                          <CIcon\n                            onClick={() => toggleDelete(item.id)}\n                            size=\"lg\"\n                            style={{\n                              color: \"red\",\n                              cursor: \"pointer\",\n                              outline: \"none\",\n                              boxShadow: \"none\",\n                            }}\n                            content={freeSet.cilTrash}\n                          />\n                        </CTooltip>\n                      </div>\n                    </td>\n                  );\n                },\n              }}\n            />\n            <CPagination\n              activePage={page}\n              pages={Math.ceil(count / 10)}\n              onActivePageChange={pageChange}\n              doubleArrows={true}\n              align=\"start\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Recipes;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/page404/Page404.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/updateEmailOtp.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/theme/colors/Colors.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/globalComponent/loader.js",["291","292"],"import React,{useState} from 'react';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst override = css`\n  display: block;\n  margin: 10px auto;\n  border-color: blue;\n`;\n\n\nconst Loader = () =>{\n    let [loading, setLoading] = useState(true);\n    let [color, setColor] = useState(\"#ffffff\");\n  \n    return (\n      <div className=\"sweet-loading\" style={{height: '800px'}}>\n      <ClipLoader color={color} loading={loading} css={override} size={150} />\n      </div>\n    );\n}\n\nexport default Loader;","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/getFrame.js",[],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":21,"column":7,"nodeType":"299","messageId":"300","endLine":21,"endColumn":16},{"ruleId":"301","severity":1,"message":"302","line":304,"column":19,"nodeType":"303","messageId":"304","endLine":304,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":304,"column":39,"nodeType":"303","messageId":"304","endLine":304,"endColumn":41},{"ruleId":"301","severity":1,"message":"302","line":391,"column":27,"nodeType":"303","messageId":"304","endLine":391,"endColumn":29},{"ruleId":"301","severity":1,"message":"302","line":600,"column":27,"nodeType":"303","messageId":"304","endLine":600,"endColumn":29},{"ruleId":"297","severity":1,"message":"305","line":25,"column":10,"nodeType":"299","messageId":"300","endLine":25,"endColumn":15},{"ruleId":"297","severity":1,"message":"306","line":2,"column":34,"nodeType":"299","messageId":"300","endLine":2,"endColumn":43},{"ruleId":"297","severity":1,"message":"307","line":3,"column":29,"nodeType":"299","messageId":"300","endLine":3,"endColumn":41},{"ruleId":"297","severity":1,"message":"308","line":5,"column":8,"nodeType":"299","messageId":"300","endLine":5,"endColumn":15},{"ruleId":"297","severity":1,"message":"309","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":17},{"ruleId":"301","severity":1,"message":"310","line":102,"column":34,"nodeType":"303","messageId":"304","endLine":102,"endColumn":36},{"ruleId":"301","severity":1,"message":"302","line":131,"column":39,"nodeType":"303","messageId":"304","endLine":131,"endColumn":41},{"ruleId":"297","severity":1,"message":"311","line":7,"column":19,"nodeType":"299","messageId":"300","endLine":7,"endColumn":29},{"ruleId":"297","severity":1,"message":"312","line":8,"column":8,"nodeType":"299","messageId":"300","endLine":8,"endColumn":9},{"ruleId":"297","severity":1,"message":"313","line":28,"column":9,"nodeType":"299","messageId":"300","endLine":28,"endColumn":16},{"ruleId":"297","severity":1,"message":"314","line":39,"column":10,"nodeType":"299","messageId":"300","endLine":39,"endColumn":14},{"ruleId":"297","severity":1,"message":"315","line":41,"column":18,"nodeType":"299","messageId":"300","endLine":41,"endColumn":27},{"ruleId":"316","severity":1,"message":"317","line":69,"column":6,"nodeType":"318","endLine":69,"endColumn":27,"suggestions":"319"},{"ruleId":"301","severity":1,"message":"302","line":75,"column":21,"nodeType":"303","messageId":"304","endLine":75,"endColumn":23},{"ruleId":"297","severity":1,"message":"320","line":83,"column":11,"nodeType":"299","messageId":"300","endLine":83,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":91,"column":31,"nodeType":"303","messageId":"304","endLine":91,"endColumn":33},{"ruleId":"316","severity":1,"message":"321","line":18,"column":6,"nodeType":"318","endLine":18,"endColumn":8,"suggestions":"322"},{"ruleId":"297","severity":1,"message":"323","line":21,"column":11,"nodeType":"299","messageId":"300","endLine":21,"endColumn":14},{"ruleId":"297","severity":1,"message":"323","line":48,"column":13,"nodeType":"299","messageId":"300","endLine":48,"endColumn":16},{"ruleId":"301","severity":1,"message":"302","line":50,"column":26,"nodeType":"303","messageId":"304","endLine":50,"endColumn":28},{"ruleId":"297","severity":1,"message":"324","line":1,"column":27,"nodeType":"299","messageId":"300","endLine":1,"endColumn":36},{"ruleId":"297","severity":1,"message":"325","line":8,"column":9,"nodeType":"299","messageId":"300","endLine":8,"endColumn":14},{"ruleId":"297","severity":1,"message":"323","line":34,"column":13,"nodeType":"299","messageId":"300","endLine":34,"endColumn":16},{"ruleId":"316","severity":1,"message":"326","line":52,"column":6,"nodeType":"318","endLine":52,"endColumn":8,"suggestions":"327"},{"ruleId":"301","severity":1,"message":"302","line":57,"column":22,"nodeType":"303","messageId":"304","endLine":57,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":75,"column":22,"nodeType":"303","messageId":"304","endLine":75,"endColumn":24},{"ruleId":"297","severity":1,"message":"328","line":7,"column":3,"nodeType":"299","messageId":"300","endLine":7,"endColumn":17},{"ruleId":"316","severity":1,"message":"329","line":41,"column":6,"nodeType":"318","endLine":41,"endColumn":8,"suggestions":"330"},{"ruleId":"301","severity":1,"message":"302","line":51,"column":22,"nodeType":"303","messageId":"304","endLine":51,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":80,"column":22,"nodeType":"303","messageId":"304","endLine":80,"endColumn":24},{"ruleId":"297","severity":1,"message":"328","line":3,"column":35,"nodeType":"299","messageId":"300","endLine":3,"endColumn":49},{"ruleId":"297","severity":1,"message":"331","line":15,"column":3,"nodeType":"299","messageId":"300","endLine":15,"endColumn":12},{"ruleId":"297","severity":1,"message":"332","line":39,"column":9,"nodeType":"299","messageId":"300","endLine":39,"endColumn":15},{"ruleId":"301","severity":1,"message":"302","line":78,"column":22,"nodeType":"303","messageId":"304","endLine":78,"endColumn":24},{"ruleId":"297","severity":1,"message":"332","line":21,"column":9,"nodeType":"299","messageId":"300","endLine":21,"endColumn":15},{"ruleId":"297","severity":1,"message":"333","line":42,"column":9,"nodeType":"299","messageId":"300","endLine":42,"endColumn":13},{"ruleId":"297","severity":1,"message":"334","line":55,"column":10,"nodeType":"299","messageId":"300","endLine":55,"endColumn":17},{"ruleId":"297","severity":1,"message":"335","line":377,"column":35,"nodeType":"299","messageId":"300","endLine":377,"endColumn":37},{"ruleId":"301","severity":1,"message":"302","line":457,"column":55,"nodeType":"303","messageId":"304","endLine":457,"endColumn":57},{"ruleId":"301","severity":1,"message":"302","line":476,"column":55,"nodeType":"303","messageId":"304","endLine":476,"endColumn":57},{"ruleId":"301","severity":1,"message":"302","line":352,"column":34,"nodeType":"303","messageId":"304","endLine":352,"endColumn":36},{"ruleId":"297","severity":1,"message":"315","line":96,"column":18,"nodeType":"299","messageId":"300","endLine":96,"endColumn":27},{"ruleId":"297","severity":1,"message":"336","line":151,"column":13,"nodeType":"299","messageId":"300","endLine":151,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":378,"column":32,"nodeType":"303","messageId":"304","endLine":378,"endColumn":34},{"ruleId":"301","severity":1,"message":"302","line":384,"column":41,"nodeType":"303","messageId":"304","endLine":384,"endColumn":43},{"ruleId":"301","severity":1,"message":"302","line":388,"column":34,"nodeType":"303","messageId":"304","endLine":388,"endColumn":36},{"ruleId":"297","severity":1,"message":"337","line":13,"column":19,"nodeType":"299","messageId":"300","endLine":13,"endColumn":29},{"ruleId":"297","severity":1,"message":"338","line":14,"column":17,"nodeType":"299","messageId":"300","endLine":14,"endColumn":25},"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"no-unused-vars","'OtpVerify' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'store' is defined but never used.","'TheFooter' is defined but never used.","'CHeaderBrand' is defined but never used.","'biglogo' is defined but never used.","'AddRecipe' is defined but never used.","Expected '!==' and instead saw '!='.","'cibWindows' is defined but never used.","'_' is defined but never used.","'topicid' is assigned a value but never used.","'show' is assigned a value but never used.","'setActive' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleQuestions'. Either include it or remove the dependency array.","ArrayExpression",["341"],"'newStartId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'faqById'. Either include it or remove the dependency array.",["342"],"'res' is assigned a value but never used.","'useEffect' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserDetails' and 'params.id'. Either include them or remove the dependency array.",["343"],"'getFileContent' is defined but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["344"],"'CTextarea' is defined but never used.","'userId' is assigned a value but never used.","'auth' is assigned a value but never used.","'disable' is assigned a value but never used.","'id' is assigned a value but never used.","'deleteResult' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},"Update the dependencies array to be: [refresh, activePage, handleQuestions]",{"range":"353","text":"354"},"Update the dependencies array to be: [faqById]",{"range":"355","text":"356"},"Update the dependencies array to be: [getUserDetails, params.id]",{"range":"357","text":"358"},"Update the dependencies array to be: [params.id]",{"range":"359","text":"360"},[1947,1968],"[refresh, activePage, handleQuestions]",[555,557],"[faqById]",[1385,1387],"[getUserDetails, params.id]",[1282,1284],"[params.id]"]