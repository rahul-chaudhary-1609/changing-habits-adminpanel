[{"/home/sonal/Documents/projects/changing-habits-adminpanel/src/index.js":"1","/home/sonal/Documents/projects/changing-habits-adminpanel/src/store.js":"2","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/index.js":"3","/home/sonal/Documents/projects/changing-habits-adminpanel/src/App.js":"4","/home/sonal/Documents/projects/changing-habits-adminpanel/src/polyfill.js":"5","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/sidebarReducer.js":"6","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/authReducer.js":"7","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/index.js":"8","/home/sonal/Documents/projects/changing-habits-adminpanel/src/history.js":"9","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheLayout.js":"10","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/resetPassword/resetPassword.js":"11","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/forgetPassword/forgetPassword.js":"12","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/login/Login.js":"13","/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/types.js":"14","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/otpVerify/index.js":"15","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo-negative.js":"16","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo.js":"17","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/sygnet.js":"18","/home/sonal/Documents/projects/changing-habits-adminpanel/src/api.js":"19","/home/sonal/Documents/projects/changing-habits-adminpanel/src/reusable/validations/loginValidations.js":"20","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/index.js":"21","/home/sonal/Documents/projects/changing-habits-adminpanel/src/apiConstants.js":"22","/home/sonal/Documents/projects/changing-habits-adminpanel/src/utils/helper.js":"23","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheSidebar.js":"24","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownTasks.js":"25","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownNotif.js":"26","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/_nav.js":"27","/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/index.js":"28","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeader.js":"29","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownMssg.js":"30","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdown.js":"31","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheFooter.js":"32","/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheContent.js":"33","/home/sonal/Documents/projects/changing-habits-adminpanel/src/routes.js":"34","/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/svgs/defaultUser.js":"35","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/updateEmailOtp.js":"36","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/adminProfile.js":"37","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/editAdmin.js":"38","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/newUsers.js":"39","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/User.js":"40","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/page404/Page404.js":"41","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/changePassword/changePassword.js":"42","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/theme/colors/Colors.js":"43","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/editUser.js":"44","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/recipes.js":"45","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/addRecipe.js":"46","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/viewStaticContent.js":"47","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/staticContent.js":"48","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/faqQ.js":"49","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/editStaticContent/editStaticContent.js":"50","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/editFaqs/editFaqs.js":"51","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/addFqs/addFaqs.js":"52","/home/sonal/Documents/projects/changing-habits-adminpanel/src/globalComponent/loader.js":"53"},{"size":461,"mtime":1620733856000,"results":"54","hashOfConfig":"55"},{"size":966,"mtime":1620733854000,"results":"56","hashOfConfig":"55"},{"size":404,"mtime":1620371980000,"results":"57","hashOfConfig":"55"},{"size":1689,"mtime":1625088717946,"results":"58","hashOfConfig":"55"},{"size":1958,"mtime":1608117924000,"results":"59","hashOfConfig":"55"},{"size":461,"mtime":1620732632000,"results":"60","hashOfConfig":"55"},{"size":529,"mtime":1620371980000,"results":"61","hashOfConfig":"55"},{"size":4102,"mtime":1620371980000,"results":"62","hashOfConfig":"55"},{"size":89,"mtime":1620371980000,"results":"63","hashOfConfig":"55"},{"size":432,"mtime":1624848531172,"results":"64","hashOfConfig":"55"},{"size":9834,"mtime":1620732456000,"results":"65","hashOfConfig":"55"},{"size":4561,"mtime":1624856098931,"results":"66","hashOfConfig":"55"},{"size":7024,"mtime":1625090538266,"results":"67","hashOfConfig":"55"},{"size":115,"mtime":1620371980000,"results":"68","hashOfConfig":"55"},{"size":7052,"mtime":1620732454000,"results":"69","hashOfConfig":"55"},{"size":6963,"mtime":1608117924000,"results":"70","hashOfConfig":"55"},{"size":6949,"mtime":1608117924000,"results":"71","hashOfConfig":"55"},{"size":987,"mtime":1608117924000,"results":"72","hashOfConfig":"55"},{"size":14834,"mtime":1625091101470,"results":"73","hashOfConfig":"55"},{"size":3673,"mtime":1625089458614,"results":"74","hashOfConfig":"55"},{"size":617,"mtime":1608117924000,"results":"75","hashOfConfig":"55"},{"size":1282,"mtime":1625089059486,"results":"76","hashOfConfig":"55"},{"size":544,"mtime":1620735910000,"results":"77","hashOfConfig":"55"},{"size":1514,"mtime":1624910126651,"results":"78","hashOfConfig":"55"},{"size":2311,"mtime":1608117924000,"results":"79","hashOfConfig":"55"},{"size":2501,"mtime":1620801240000,"results":"80","hashOfConfig":"55"},{"size":624,"mtime":1624946522567,"results":"81","hashOfConfig":"55"},{"size":699,"mtime":1625087839594,"results":"82","hashOfConfig":"55"},{"size":1834,"mtime":1625090812238,"results":"83","hashOfConfig":"55"},{"size":4916,"mtime":1620371980000,"results":"84","hashOfConfig":"55"},{"size":2329,"mtime":1624849551020,"results":"85","hashOfConfig":"55"},{"size":231,"mtime":1620371980000,"results":"86","hashOfConfig":"55"},{"size":1374,"mtime":1620733280000,"results":"87","hashOfConfig":"55"},{"size":3947,"mtime":1625089286366,"results":"88","hashOfConfig":"55"},{"size":745,"mtime":1620371980000,"results":"89","hashOfConfig":"55"},{"size":7002,"mtime":1620804786000,"results":"90","hashOfConfig":"55"},{"size":4600,"mtime":1624967141192,"results":"91","hashOfConfig":"55"},{"size":12695,"mtime":1624968244443,"results":"92","hashOfConfig":"55"},{"size":12204,"mtime":1624757028734,"results":"93","hashOfConfig":"55"},{"size":5369,"mtime":1624537296424,"results":"94","hashOfConfig":"55"},{"size":899,"mtime":1620718298000,"results":"95","hashOfConfig":"55"},{"size":10222,"mtime":1624850127171,"results":"96","hashOfConfig":"55"},{"size":3718,"mtime":1620801350000,"results":"97","hashOfConfig":"55"},{"size":17049,"mtime":1624903059713,"results":"98","hashOfConfig":"55"},{"size":12188,"mtime":1625075426558,"results":"99","hashOfConfig":"55"},{"size":16832,"mtime":1624913486408,"results":"100","hashOfConfig":"55"},{"size":2919,"mtime":1625047843941,"results":"101","hashOfConfig":"55"},{"size":4724,"mtime":1625086098595,"results":"102","hashOfConfig":"55"},{"size":8639,"mtime":1625083046265,"results":"103","hashOfConfig":"55"},{"size":6634,"mtime":1625048388472,"results":"104","hashOfConfig":"55"},{"size":5146,"mtime":1625087683489,"results":"105","hashOfConfig":"55"},{"size":4515,"mtime":1625086418669,"results":"106","hashOfConfig":"55"},{"size":539,"mtime":1624940915441,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1v84vs3",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"110"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"110"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"110"},"/home/sonal/Documents/projects/changing-habits-adminpanel/src/index.js",[],["230","231"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/store.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/App.js",["232"],"import React, { Component } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./scss/style.scss\";\r\nimport history from \"../src/history\";\r\n\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n);\r\n\r\nconst TheLayout = React.lazy(() => import(\"./containers/TheLayout\"));\r\n\r\nconst Login = React.lazy(() => import(\"./views/pages/login/Login\"));\r\nconst Resetpassword = React.lazy(() =>\r\n  import(\"./views/pages/resetPassword/resetPassword\")\r\n);\r\nconst Forgetpassword = React.lazy(() =>\r\n  import(\"./views/pages/forgetPassword/forgetPassword\")\r\n);\r\nconst OtpVerify = React.lazy(() => import(\"./views/pages/otpVerify\"));\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router history={history}>\r\n        <React.Suspense fallback={loading}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/login\"\r\n              name=\"Login Page\"\r\n              render={(props) => <Login {...props} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/resetpassword\"\r\n              name=\"Reset Pass\"\r\n              render={(props) => <Resetpassword {...props} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/forgetpassword\"\r\n              name=\"Forget Pass\"\r\n              render={(props) => <Forgetpassword {...props} />}\r\n            />\r\n            <Route\r\n              path=\"/\"\r\n              name=\"Home\"\r\n              render={(props) => <TheLayout {...props} />}\r\n            />\r\n          </Switch>\r\n        </React.Suspense>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/polyfill.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/sidebarReducer.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reducers/authReducer.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/history.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheLayout.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/resetPassword/resetPassword.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/forgetPassword/forgetPassword.js",["233"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CModalHeader,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useFormik } from \"formik\";\r\nimport { forgetpasswordApi } from \"../../../api\";\r\n\r\nimport { forgetpasswordValidation } from \"../../../reusable/validations/loginValidations\";\r\n\r\nconst initialValues = {\r\n  email: \"\",\r\n  error: \"\",\r\n};\r\n\r\nexport default function Forgetpassword() {\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [toast, setToast] = useState();\r\n  const onSubmit = async (values, actions) => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await forgetpasswordApi(values.email);\r\n      if (result) {\r\n        setLoading(false);\r\n        setToast(\r\n          \"Password reset link has been sent to your registered email id\"\r\n        );\r\n        setTimeout(() => {\r\n          history.push(\"/login\");\r\n        }, 1500);\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n      actions.setFieldError(\"error\", error.message);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: forgetpasswordValidation,\r\n    onSubmit,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {toast && (\r\n        <div\r\n          style={{\r\n            backgroundColor: \"#9ACD32\",\r\n            padding: \"10px\",\r\n            width: \"fit-content\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"12px\",\r\n          }}\r\n        >\r\n          {toast}\r\n        </div>\r\n      )}\r\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n        <CContainer>\r\n          <CRow className=\"justify-content-center\">\r\n            <CCol md=\"6\">\r\n              <CCardGroup>\r\n                <CCard className=\"p-4\">\r\n                  <CCardBody>\r\n                    <CForm onSubmit={formik.handleSubmit}>\r\n                      <h1>Forgot Password</h1>\r\n                      <p className=\"text-muted\">\r\n                        Enter your registered email address\r\n                      </p>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-user\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput\r\n                          type=\"text\"\r\n                          placeholder=\"Email address\"\r\n                          autoComplete=\"email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          onBlur={formik.handleBlur}\r\n                          value={formik.values.email}\r\n                          onChange={formik.handleChange}\r\n                        />\r\n                      </CInputGroup>\r\n                      {formik.touched.email && formik.errors.email ? (\r\n                        <div className=\"email-validate\">\r\n                          {formik.errors.email}\r\n                        </div>\r\n                      ) : null}\r\n                      {formik.errors.error ? (\r\n                        <div className=\"email-validate\">\r\n                          {formik.errors.error}\r\n                        </div>\r\n                      ) : null}\r\n                      <CRow>\r\n                        <CCol xs=\"6\">\r\n                          {!loading ? (\r\n                            <CButton\r\n                              color=\"primary\"\r\n                              className=\"px-4\"\r\n                              type=\"submit\"\r\n                            >\r\n                              Submit\r\n                            </CButton>\r\n                          ) : (\r\n                            <div\r\n                              className=\"spinner-border text-primary\"\r\n                              role=\"status\"\r\n                            >\r\n                              <span className=\"sr-only\">Loading...</span>\r\n                            </div>\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CForm>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCardGroup>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/login/Login.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/types.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/otpVerify/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo-negative.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/logo.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/icons/sygnet.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/api.js",["234","235"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/reusable/validations/loginValidations.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/apiConstants.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/utils/helper.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheSidebar.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownTasks.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownNotif.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/_nav.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/actions/index.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeader.js",["236","237"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdownMssg.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheHeaderDropdown.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheFooter.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/containers/TheContent.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/routes.js",["238"],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/assets/svgs/defaultUser.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/updateEmailOtp.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/adminProfile.js",["239"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CRow,\r\n  CImg,\r\n  CCardHeader,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n} from \"@coreui/react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GetUserProfile } from \"../../api\";\r\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\r\n\r\nexport default function AdminProfile() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const userId = useSelector((state) => state.auth.userId);\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const res = await GetUserProfile();\r\n        setUserData(res);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return userData ? (\r\n    <CRow alignHorizontal=\"center\" alignVertical=\"center\">\r\n      <CCol xl>\r\n        <CModal\r\n          show={location.state ? true : false}\r\n          size={location.state && location.state.type === \"edit\" ? \"sm\" : \"\"}\r\n          backdrop={false}\r\n          color=\"warning\"\r\n        >\r\n          <CModalHeader closeButton>\r\n            {/* <CModalTitle>Block User Account?</CModalTitle> */}\r\n            {location.state && location.state.data ? location.state.data : \"\"}\r\n          </CModalHeader>\r\n        </CModal>\r\n        <CCard>\r\n          <CCardHeader\r\n            style={{\r\n              fontFamily: \"Lato\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <h2>\r\n              <strong>Admin Profile</strong>\r\n            </h2>\r\n            <CButton\r\n              style={{ width: \"8rem\" }}\r\n              color=\"success\"\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: \"./editAdmin\",\r\n                  state: { data: userData },\r\n                })\r\n              }\r\n            >\r\n              <strong>Edit Profile</strong>\r\n            </CButton>\r\n          </CCardHeader>\r\n          <CCardBody\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            {userData.profile_picture_url ? (\r\n              <CImg\r\n                src={userData.profile_picture_url}\r\n                className=\"c-avatar-img\"\r\n                alt=\"\"\r\n                style={{ marginBottom: \"2rem\", width: \"6rem\", height: \"6rem\" }}\r\n              />\r\n            ) : (\r\n              <DefaultUser style={{ marginBottom: \"2rem\" }} />\r\n            )}\r\n\r\n            <table className=\"table table-striped table-hover\">\r\n              <tbody style={{ fontFamily: \"Poppins\" }}>\r\n                <tr\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-start\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <td style={{ marginLeft: \"8rem\" }}>\r\n                    <strong>Name</strong>\r\n                  </td>\r\n                  <td style={{ marginLeft: \"8rem\" }}>\r\n                    <>{userData[\"name\"] ? String(userData[\"name\"]) : \"\"}</>\r\n                  </td>\r\n                </tr>\r\n                <tr\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-start\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <td style={{ marginLeft: \"8rem\" }}>\r\n                    <strong>Email</strong>\r\n                  </td>\r\n                  <td style={{ marginLeft: \"9.8rem\" }}>\r\n                    <>{userData[\"email\"] ? String(userData[\"email\"]) : \"\"}</>\r\n                  </td>\r\n                </tr>\r\n                <tr\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-start\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <td style={{ marginLeft: \"8rem\" }}>\r\n                    <strong>Phone Number</strong>\r\n                  </td>\r\n                  <td style={{ marginLeft: \"5.6rem\" }}>\r\n                    <>\r\n                      {userData[\"phone_no\"] ? String(userData[\"phone_no\"]) : \"\"}\r\n                    </>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  ) : null;\r\n}\r\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/adminProfile/editAdmin.js",["240","241","242"],"import React, { useState } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CInputFile,\r\n  CTextarea,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n  CImg,\r\n} from \"@coreui/react\";\r\n\r\nimport { useFormik } from \"formik\";\r\nimport { UpdateProfile, uploadImage } from \"../../api\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { updateEmail } from \"../../reusable/validations/loginValidations\";\r\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\r\n\r\nexport default function EditAdmin() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  if (!location.state) {\r\n    history.push(\"/profile\");\r\n  }\r\n\r\n  const userId = useSelector((state) => state.auth.userId);\r\n  const update = useSelector((state) => state.sidebar.updatePic);\r\n  const [emailModal, setEmailModal] = useState(false);\r\n  const [phoneModal, setPhoneModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showError, setShowError] = useState(\"\");\r\n  const [image, setImage] = useState({});\r\n\r\n  console.log(\"location\", location.state);\r\n\r\n  const formdata = new FormData();\r\n\r\n  const initialValues = {\r\n    name: location.state ? location.state.data.name : \"\",\r\n    email: location.state ? location.state.data.email : \"\",\r\n    profile_picture_url: location.state\r\n      ? location.state.data.profile_picture_url\r\n      : \"\",\r\n    newemail: location.state ? location.state.data.email : \"\",\r\n    phone:\r\n      location.state && location.state.data.phone_no\r\n        ? location.state.data.phone_no\r\n        : \"\",\r\n    newPhone:\r\n      location.state && location.state.data.phoneNumber\r\n        ? location.state.data.phoneNumber\r\n        : \"\",\r\n  };\r\n\r\n  const handleProfileChange = async (image) => {\r\n    setImage(image);\r\n    // formdata.append(\"image\", image, image.name);\r\n    // formdata.append(\"folderName\", \"user\");\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    const bodyFormData = new FormData();\r\n    formdata.append(\"image\", image, image.name);\r\n    formdata.append(\"folderName\", \"user\");\r\n    try {\r\n      const res = await uploadImage(formdata);\r\n      if (res.status == 200) {\r\n        bodyFormData.append(\"profile_picture_url\", res.data.image_url);\r\n      }\r\n      bodyFormData.append(\"name\", values.name);\r\n      bodyFormData.append(\r\n        \"email\",\r\n        values.newemail ? values.newemail : values.email\r\n      );\r\n      bodyFormData.append(\r\n        \"phone\",\r\n        values.newPhone ? values.newPhone : values.phone\r\n      );\r\n\r\n      try {\r\n        setLoading(true);\r\n        const response = await UpdateProfile(bodyFormData);\r\n\r\n        update();\r\n\r\n        setLoading(false);\r\n\r\n        history.push({\r\n          pathname: `/profile`,\r\n          state: { data: response.message, type: \"edit\" },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema: updateEmail,\r\n  });\r\n\r\n  const handleUpadteEmail = async (type) => {\r\n    setEmailModal(!emailModal);\r\n  };\r\n\r\n  return (\r\n    <CContainer\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <CCol lg=\"8\" md=\"6\">\r\n        <CModal\r\n          show={emailModal}\r\n          centered={true}\r\n          backdrop={false}\r\n          color=\"warning\"\r\n          onClose={setEmailModal}\r\n          style={{ fontFamily: \"Poppins\" }}\r\n        >\r\n          <CModalHeader closeButton>\r\n            <CModalTitle>Enter New Email Address</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CFormGroup row>\r\n              <CCol md=\"3\">\r\n                <CLabel htmlFor=\"hf-categorytype\">\r\n                  <h6>New Email:</h6>\r\n                </CLabel>\r\n              </CCol>\r\n              <CCol xs=\"12\" md=\"9\">\r\n                <CInput\r\n                  type=\"text\"\r\n                  id=\"newemail\"\r\n                  name=\"newemail\"\r\n                  onBlur={formik.handleBlur}\r\n                  value={formik.values.newemail}\r\n                  onChange={formik.handleChange}\r\n                />\r\n                {formik.touched.newemail && formik.errors.newemail ? (\r\n                  <div className=\"email-validate\">{formik.errors.newemail}</div>\r\n                ) : null}\r\n              </CCol>\r\n            </CFormGroup>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"success\" onClick={() => handleUpadteEmail(\"email\")}>\r\n              Yes\r\n            </CButton>\r\n            <CButton color=\"secondary\" onClick={() => setEmailModal(false)}>\r\n              Cancel\r\n            </CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n        <CModal\r\n          show={phoneModal}\r\n          centered={true}\r\n          backdrop={false}\r\n          color=\"warning\"\r\n          onClose={setPhoneModal}\r\n          style={{ fontFamily: \"Poppins\" }}\r\n        >\r\n          <CModalHeader closeButton>\r\n            <CModalTitle>Enter New Phone Number</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CFormGroup row>\r\n              <CCol md=\"3\">\r\n                <CLabel htmlFor=\"hf-categorytype\">\r\n                  <h6>New Phone:</h6>\r\n                </CLabel>\r\n              </CCol>\r\n              <CCol xs=\"12\" md=\"9\">\r\n                <CInput\r\n                  type=\"text\"\r\n                  id=\"newPhone\"\r\n                  name=\"newPhone\"\r\n                  onBlur={formik.handleBlur}\r\n                  value={formik.values.newPhone}\r\n                  onChange={formik.handleChange}\r\n                />\r\n                {formik.touched.newPhone && formik.errors.newPhone ? (\r\n                  <div className=\"email-validate\">{formik.errors.newPhone}</div>\r\n                ) : null}\r\n              </CCol>\r\n            </CFormGroup>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"success\" onClick={() => handleUpadteEmail(\"phone\")}>\r\n              Yes\r\n            </CButton>\r\n            <CButton color=\"secondary\" onClick={() => setPhoneModal(false)}>\r\n              Cancel\r\n            </CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n        <CCard>\r\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\r\n            <h3>\r\n              <strong>Edit Admin</strong>\r\n            </h3>\r\n          </CCardHeader>\r\n          <CCardBody style={{ fontFamily: \"Poppins\" }}>\r\n            <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\r\n              <CFormGroup row>\r\n                <CCol md=\"3\">\r\n                  <CLabel htmlFor=\"custom-file-input\">\r\n                    Update Profile Pic\r\n                  </CLabel>\r\n                </CCol>\r\n                <CCol xs=\"8\" md=\"6\">\r\n                  {initialValues.profile_picture_url ? (\r\n                    <>\r\n                      <CImg\r\n                        src={initialValues.profile_picture_url}\r\n                        className=\"c-avatar-img\"\r\n                        alt=\"\"\r\n                        style={{\r\n                          marginBottom: \"2rem\",\r\n                          width: \"6rem\",\r\n                          height: \"6rem\",\r\n                          paddingBottom: \"10px\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      />\r\n                    </>\r\n                  ) : (\r\n                    <DefaultUser style={{ marginBottom: \"2rem\" }} />\r\n                  )}\r\n                  <CInputFile\r\n                    name=\"profile_picture_url\"\r\n                    type=\"file\"\r\n                    className=\"hidden\"\r\n                    onChange={(e) => {\r\n                      formik.setFieldValue(\"profile_picture_url\", \"\");\r\n\r\n                      if (\r\n                        e.target.files[0].type !== \"image/png\" &&\r\n                        e.target.files[0].type !== \"image/jpeg\"\r\n                      ) {\r\n                        setShowError(\"Only jpeg, png images are allowed\");\r\n                        return;\r\n                      }\r\n                      setShowError(\"\");\r\n                      handleProfileChange(e.target.files[0]);\r\n                    }}\r\n                  />\r\n                  {showError ? (\r\n                    <div className=\"email-validate\">{showError}</div>\r\n                  ) : null}\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row>\r\n                <CCol md=\"3\">\r\n                  <CLabel htmlFor=\"hf-category\">Admin Name</CLabel>\r\n                </CCol>\r\n                <CCol>\r\n                  <CInput\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.name}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.touched.name && formik.errors.name ? (\r\n                    <div className=\"email-validate\">{formik.errors.name}</div>\r\n                  ) : null}\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row>\r\n                <CCol md=\"3\">\r\n                  <CLabel htmlFor=\"hf-categorytype\">Email Address</CLabel>\r\n                </CCol>\r\n                <CCol xs=\"12\" md=\"9\">\r\n                  <CInput\r\n                    type=\"text\"\r\n                    id=\"email\"\r\n                    disabled=\"true\"\r\n                    name=\"email\"\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  <CButton\r\n                    onClick={() => setEmailModal(!emailModal)}\r\n                    style={{ color: \"white\", marginTop: \"1rem\", width: \"8rem\" }}\r\n                    color=\"warning\"\r\n                  >\r\n                    Update Email\r\n                  </CButton>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row>\r\n                <CCol md=\"3\">\r\n                  <CLabel htmlFor=\"hf-categorytype\">Phone Number</CLabel>\r\n                </CCol>\r\n                <CCol xs=\"12\" md=\"9\">\r\n                  <CInput\r\n                    id=\"phone\"\r\n                    disabled=\"true\"\r\n                    name=\"phone\"\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.phone}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  <CButton\r\n                    onClick={() => setPhoneModal(!phoneModal)}\r\n                    style={{ color: \"white\", marginTop: \"1rem\", width: \"8rem\" }}\r\n                    color=\"warning\"\r\n                  >\r\n                    Update Phone\r\n                  </CButton>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CCardFooter\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-around\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <CButton\r\n                  onClick={() => history.push(\"/profile\")}\r\n                  style={{ width: \"5rem\" }}\r\n                  type=\"reset\"\r\n                  color=\"danger\"\r\n                >\r\n                  <strong>Cancel</strong>\r\n                </CButton>\r\n                {loading ? (\r\n                  <div className=\"spinner-border text-success\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                ) : (\r\n                  <CButton\r\n                    type=\"submit\"\r\n                    color=\"success\"\r\n                    style={{ width: \"5rem\" }}\r\n                  >\r\n                    <strong>Update</strong>\r\n                  </CButton>\r\n                )}\r\n              </CCardFooter>\r\n              <CCardFooter>\r\n                <CCol style={{ textAlign: \"center\", margin: \"10px\" }}>\r\n                  <CButton\r\n                    color=\"primary\"\r\n                    onClick={() => history.push(\"/changePassword\")}\r\n                  >\r\n                    <strong>Change Password</strong>\r\n                  </CButton>\r\n                </CCol>\r\n              </CCardFooter>\r\n            </CForm>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CContainer>\r\n  );\r\n}\r\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/newUsers.js",["243"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination,\r\n  CTooltip,\r\n  CSwitch,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CButton,\r\n  CModalTitle,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n} from \"@coreui/react\";\r\nimport { freeSet } from \"@coreui/icons\";\r\nimport CIcon from \"@coreui/icons-react\";\r\n\r\nimport { GetUserList, ChangeUserStatus } from \"../../api\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst getBadge = (status) => {\r\n  switch (status) {\r\n    case \"Active\":\r\n      return \"success\";\r\n    case \"Banned\":\r\n      return \"danger\";\r\n    default:\r\n      return \"primary\";\r\n  }\r\n};\r\n\r\nconst fields = [\r\n  { key: \"id\", label: \"Id\", _style: { fontFamily: \"Poppins\" } },\r\n  { key: \"name\", label: \"Username\", _style: { fontFamily: \"Poppins\" } },\r\n  {\r\n    key: \"email\",\r\n    label: \"Email/Phone\",\r\n    _style: { fontFamily: \"Poppins\" },\r\n  },\r\n  {\r\n    key: \"created_at\",\r\n    label: \"Registration Date\",\r\n    _style: { fontFamily: \"Poppins\" },\r\n  },\r\n  { key: \"status\", _style: { fontFamily: \"Poppins\" } },\r\n  {\r\n    key: \"show_details\",\r\n    label: \"Action\",\r\n    _style: { minWidth: \"7rem\" },\r\n    sorter: false,\r\n    filter: false,\r\n  },\r\n];\r\nconst Users = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\r\n  const queryPageSEarch = useLocation().search.match(\r\n    /search=([A-Za-z0-9 _]+)/,\r\n    \"\"\r\n  );\r\n\r\n  const currentPageSearch =\r\n    queryPageSEarch && queryPageSEarch[1] ? queryPageSEarch[1] : \"\";\r\n\r\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\r\n\r\n  const [page, setPage] = useState(currentPage);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [count, setCount] = useState();\r\n  const [userId, setUserId] = useState(null);\r\n  const [onsearchCHange, setOnSearchChange] = useState(\r\n    currentPageSearch ? currentPageSearch : \"\"\r\n  );\r\n  const [active, setActive] = useState(null);\r\n  const [enableModal, setEnableModal] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n\r\n  const pageChange = (newPage) => {\r\n    let newPage1 = newPage;\r\n    if (newPage1 === 0) {\r\n      newPage1 = 1;\r\n    }\r\n    currentPage !== newPage &&\r\n      history.push(`/users?search=${onsearchCHange}&&page=${newPage1}`);\r\n  };\r\n\r\n  const toggleEnable = (id, status) => {\r\n    setUserId(id);\r\n    setActive(status);\r\n    setEnableModal(!enableModal);\r\n  };\r\n\r\n  const handleEnable = async () => {\r\n    try {\r\n      setEnableModal(!enableModal);\r\n      let pass;\r\n      if (active) {\r\n        pass = 0;\r\n      } else {\r\n        pass = 1;\r\n      }\r\n      await ChangeUserStatus(userId, pass);\r\n      setRefresh(!refresh);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      setDeleteModal(!deleteModal);\r\n      await ChangeUserStatus(userId, 3);\r\n      setRefresh(!refresh);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setOnSearchChange(e.target.value);\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    currentPageSearch !== onsearchCHange &&\r\n      history.push(`/users?search=${onsearchCHange}&&page=${page}`);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setOnSearchChange(\"\");\r\n    let newPage = page;\r\n    if (newPage === 0) {\r\n      newPage = 1;\r\n    }\r\n    history.push(`/users?search=&&page=${newPage}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await GetUserList(currentPage, currentPageSearch);\r\n        setLoading(false);\r\n        data.rows.map((item) => {\r\n          item._classes = \"catTableItem\";\r\n\r\n          if (item.created_at) {\r\n            item.created_at = item.created_at.slice(0, 10);\r\n          }\r\n          if (item.dateOfBirth) {\r\n            item.dateOfBirth = item.dateOfBirth.slice(0, 10);\r\n          }\r\n\r\n          return item;\r\n        });\r\n\r\n        setData(data.rows);\r\n        setCount(data.count);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getData();\r\n\r\n    currentPage !== page && setPage(currentPage);\r\n  }, [currentPage, currentPageSearch, refresh, page]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CModal\r\n        show={enableModal}\r\n        centered={true}\r\n        color=\"warning\"\r\n        onClose={setEnableModal}\r\n        backdrop={true}\r\n        style={{ fontFamily: \"Poppins\" }}\r\n      >\r\n        <CModalHeader style={{ height: \"3rem\" }}>\r\n          <CModalTitle>{active ? \"Block User?\" : \"Unblock User?\"}</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          {active\r\n            ? \"Are you sure you want to Block the User?\"\r\n            : \"Are you sure you want to Unblock the User?\"}\r\n        </CModalBody>\r\n        <CModalFooter style={{ height: \"4rem\" }}>\r\n          <CButton color=\"success\" onClick={handleEnable}>\r\n            Yes\r\n          </CButton>{\" \"}\r\n          <CButton color=\"secondary\" onClick={() => setEnableModal(false)}>\r\n            Cancel\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n      <CModal\r\n        show={deleteModal}\r\n        centered={true}\r\n        backdrop={true}\r\n        color=\"warning\"\r\n        onClose={setDeleteModal}\r\n      >\r\n        <CModalHeader>\r\n          <CModalTitle>Delete User Account?</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          Are you sure you want to Delete the User account?\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          <CButton color=\"primary\" onClick={handleDelete}>\r\n            Yes\r\n          </CButton>{\" \"}\r\n          <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\r\n            Cancel\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n      <CCol xxl={12}>\r\n        <CCard>\r\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\r\n            <h2>\r\n              <strong>User Management</strong>\r\n            </h2>\r\n            <CButton\r\n              style={{ width: \"5rem\", marginLeft: \"90%\" }}\r\n              color=\"success\"\r\n              onClick={() => history.push(\"/addUser\")}\r\n            >\r\n              <strong>Add</strong>\r\n            </CButton>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CDataTable\r\n              items={data}\r\n              fields={fields}\r\n              hover\r\n              border\r\n              addTableClasses=\"table-class\"\r\n              striped\r\n              loading={loading}\r\n              noItemsViewSlot={\r\n                !loading ? \"\" : <div style={{ height: \"14rem\" }}></div>\r\n              }\r\n              clickableRows\r\n              overTableSlot={\r\n                <CCol style={{ marginBottom: \"1rem\", display: \"flex\" }} md=\"5\">\r\n                  <CInputGroup>\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText\r\n                        style={{ backgroundColor: \"#0D86FF\", color: \"white\" }}\r\n                      >\r\n                        <CIcon content={freeSet.cilSearch} />\r\n                      </CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput\r\n                      style={{ maxWidth: \"15rem\" }}\r\n                      value={onsearchCHange}\r\n                      onChange={handleSearchChange}\r\n                      id=\"input1-group1\"\r\n                      name=\"input1-group1\"\r\n                      placeholder=\"Search\"\r\n                    />\r\n\r\n                    <CButton\r\n                      onClick={handleSearch}\r\n                      style={{ marginLeft: \"1rem\" }}\r\n                      color=\"info\"\r\n                    >\r\n                      Search\r\n                    </CButton>\r\n                    <CButton\r\n                      onClick={() => {\r\n                        handleReset();\r\n                      }}\r\n                      style={{ marginLeft: \"1rem\" }}\r\n                      color=\"info\"\r\n                    >\r\n                      Reset\r\n                    </CButton>\r\n                  </CInputGroup>\r\n                </CCol>\r\n              }\r\n              underTableSlot={\r\n                <div style={{ marginBottom: \"1rem\" }}>\r\n                  Showing {page * 10 - 9}-\r\n                  {page * 10 < data.length ? page * 10 : data.length} of{\" \"}\r\n                  {data.length}\r\n                </div>\r\n              }\r\n              scopedSlots={{\r\n                dateOfBirth: (item) => (\r\n                  <td>{item.dateOfBirth ? item.dateOfBirth : \"\"}</td>\r\n                ),\r\n                email: (item) => <td>{item.email}</td>,\r\n                status: (item) => (\r\n                  <td>\r\n                    {item.status == 1 ? (\r\n                      <CBadge\r\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\r\n                        shape=\"pill\"\r\n                        color={getBadge(\"Active\")}\r\n                      >\r\n                        Active\r\n                      </CBadge>\r\n                    ) : (\r\n                      <CBadge\r\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\r\n                        shape=\"pill\"\r\n                        color={getBadge(\"Banned\")}\r\n                      >\r\n                        Blocked\r\n                      </CBadge>\r\n                    )}\r\n                  </td>\r\n                ),\r\n                show_details: (item, index) => {\r\n                  return (\r\n                    <td>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flexDirection: \"row\",\r\n                          justifyContent: \"space-around\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <CTooltip content={\"edit User\"} placement={\"top-start\"}>\r\n                          <CIcon\r\n                            onClick={() =>\r\n                              history.push({\r\n                                pathname: `/editUser/${item.id}`,\r\n                                state: { item },\r\n                              })\r\n                            }\r\n                            style={{ color: \"red\", cursor: \"pointer\" }}\r\n                            size=\"lg\"\r\n                            content={freeSet.cilPencil}\r\n                          />\r\n                        </CTooltip>\r\n                        <CTooltip content={`View User`} placement={\"top-start\"}>\r\n                          <FontAwesomeIcon\r\n                            color=\"green\"\r\n                            size=\"lg\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={() =>\r\n                              history.push({\r\n                                pathname: `/user/${item.id}`,\r\n                                state: { item },\r\n                              })\r\n                            }\r\n                            icon={faEye}\r\n                          />\r\n                        </CTooltip>\r\n                        <CSwitch\r\n                          onChange={() => toggleEnable(item.id, item.status)}\r\n                          size=\"sm\"\r\n                          variant={\"3d\"}\r\n                          color={\"success\"}\r\n                          checked={item.status}\r\n                        />\r\n                      </div>\r\n                    </td>\r\n                  );\r\n                },\r\n              }}\r\n            />\r\n            <CPagination\r\n              activePage={page}\r\n              pages={Math.ceil(count / 10)}\r\n              onActivePageChange={pageChange}\r\n              doubleArrows={true}\r\n              align=\"start\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/User.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/pages/page404/Page404.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/changePassword/changePassword.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/theme/colors/Colors.js",[],"/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/users/editUser.js",["244","245","246","247","248","249"],"import React, { useState, useEffect } from \"react\";\nimport FormData from \"form-data\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CImg,\n  CInputFile,\n} from \"@coreui/react\";\nimport { useFormik } from \"formik\";\nimport {\n  EditUserDetails,\n  addUserList,\n  ViewUserDetails,\n  uploadImage,\n} from \"../../api\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { UserValidation } from \"../../reusable/validations/loginValidations\";\nimport DefaultUser from \"../../assets/svgs/defaultUser\";\n\nexport default function EditUser(props) {\n  const history = useHistory();\n  const params = useParams();\n  const [loading, setLoading] = useState(false);\n\n  const [userDetails, setUserDetails] = useState({});\n  const [imageUrl, setImageUrl] = useState(null);\n\n  const initialValues = {\n    name: userDetails.name ? userDetails.name : \"\",\n    email: userDetails.email ? userDetails.email : \"\",\n    country_code: userDetails.country_code ? userDetails.country_code : \"\",\n    phone_no: userDetails.phone_no ? userDetails.phone_no : \"\",\n    profile_picture_url: userDetails.profile_picture_url\n      ? userDetails.profile_picture_url\n      : \"\",\n  };\n\n  useEffect(() => {\n    getUserDetails();\n  }, []);\n\n  const getUserDetails = async () => {\n    try {\n      const res = await ViewUserDetails(params.id);\n      if (res.status == 200) {\n        setUserDetails(res);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleProfileChange = async (e) => {\n    var image = e.currentTarget.files[0];\n    var data = new FormData();\n    data.append(\"image\", image, image.name);\n    data.append(\"folderName\", \"user\");\n\n    try {\n      const res = await uploadImage(data);\n      if (res.status == 200) {\n        debugger;\n        setImageUrl(res.image_url);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmit = async (values) => {\n    try {\n      if (userDetails.name) {\n        let formData = {};\n        if (values.name != userDetails.name) formData.name = values.name;\n        if (values.email != userDetails.email) formData.email = values.email;\n        if (values.phone_no != userDetails.phone_no)\n          formData.phone_no = values.phone_no;\n        if (imageUrl) formData.profile_picture_url = imageUrl;\n        setLoading(true);\n        const response = await EditUserDetails(formData, Number(params.id));\n        setLoading(false);\n        if (response) {\n          history.push(\"/users\");\n        }\n      } else {\n        setLoading(true);\n        const response = await addUserList(values);\n        setLoading(false);\n        if (response) {\n          history.push(\"/users\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues,\n    onSubmit,\n    validationSchema: UserValidation,\n  });\n\n  return (\n    <CContainer\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <CCol xs=\"12\" md=\"6\">\n        {params.id ? (\n          <CCard>\n            <CCardHeader style={{ fontFamily: \"Lato\" }}>\n              <h3>\n                <strong>Edit User Details</strong>\n              </h3>\n            </CCardHeader>\n            <CCardBody style={{ fontFamily: \"Roboto\" }}>\n              <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\n                <CFormGroup row>\n                  <CCol xs=\"12\" style={{ textAlign: \"center\" }}>\n                    {userDetails.profile_picture_url ? (\n                      <>\n                        <CImg\n                          src={userDetails.profile_picture_url}\n                          className=\"c-avatar-img\"\n                          alt=\"admin@bootstrapmaster.com\"\n                          style={{\n                            marginBottom: \"2rem\",\n                            width: \"6rem\",\n                            height: \"6rem\",\n                          }}\n                        />\n                        <br />\n                        <span\n                          style={{\n                            fontSize: \"18px\",\n                            fontWeight: \"bold\",\n                          }}\n                        >\n                          Profile Picture\n                        </span>\n                      </>\n                    ) : (\n                      <DefaultUser style={{ marginBottom: \"2rem\" }} />\n                    )}\n                    <div style={{ textAlign: \"center\" }}>\n                      <label for=\"upload\">\n                        <div\n                          class=\"w-full px-2 py-1 my-2 flex justify-around items-center bg-gray-400 rounded-lg text-white\"\n                          title=\"Upload a photo...\"\n                        >\n                          <svg\n                            style={{ width: \"20px\" }}\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                              stroke-width=\"2\"\n                              d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"\n                            ></path>\n                          </svg>{\" \"}\n                          Upload\n                          <CInput\n                            type=\"file\"\n                            name=\"upload\"\n                            id=\"upload\"\n                            onChange={handleProfileChange}\n                            style={{ display: \"none\" }}\n                            accept=\"image/png,image/jpeg\"\n                          />\n                        </div>\n                      </label>\n                    </div>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter User Name</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.name && formik.errors.name ? (\n                      <div className=\"email-validate\">{formik.errors.name}</div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Email</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"email\"\n                      name=\"email\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.email}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.email && formik.errors.email ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.email}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Mobile Number</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"phone_no\"\n                      name=\"phone_no\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.phone_no}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.phone_no && formik.errors.phone_no ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.phone_no}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CCardFooter\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-around\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  {loading ? (\n                    <div className=\"spinner-border text-success\" role=\"status\">\n                      <span className=\"sr-only\">Loading...</span>\n                    </div>\n                  ) : (\n                    <CButton\n                      type=\"submit\"\n                      style={{ width: \"5rem\" }}\n                      color=\"success\"\n                    >\n                      {params.id ? (\n                        <strong>Update</strong>\n                      ) : (\n                        <strong>Add</strong>\n                      )}\n                    </CButton>\n                  )}\n\n                  <CButton\n                    style={{ width: \"5rem\" }}\n                    color=\"danger\"\n                    onClick={() => history.goBack()}\n                  >\n                    <strong>Cancel</strong>\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        ) : (\n          <CCard>\n            <CCardHeader style={{ fontFamily: \"Lato\" }}>\n              <h3>\n                <strong>Add User Details</strong>\n              </h3>\n            </CCardHeader>\n            <CCardBody style={{ fontFamily: \"Roboto\" }}>\n              <CForm onSubmit={formik.handleSubmit} className=\"form-horizontal\">\n                <CFormGroup row>\n                  <CCol xs=\"12\" md=\"9\">\n                    <DefaultUser style={{ marginBottom: \"2rem\" }} />\n                    <CInputFile\n                      id=\"profile_picture_url\"\n                      name=\"profile_picture_url\"\n                      type=\"file\"\n                      accept=\"image/x-png,image/gif,image/jpeg\"\n                      onChange={formik.handleChange}\n                    />\n                    {formik.errors.profile_picture_url ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.profile_picture_url}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter User Name</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.categoryType &&\n                    formik.errors.categoryType ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.categoryType}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Email</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"email\"\n                      name=\"email\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.email}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.email && formik.errors.email ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.email}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>Enter Mobile Number</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      type=\"text\"\n                      id=\"country_code\"\n                      name=\"country_code\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.country_code}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.country_code &&\n                    formik.errors.country_code ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.country_code}\n                      </div>\n                    ) : null}\n                    <CInput\n                      type=\"text\"\n                      id=\"phone_no\"\n                      name=\"phone_no\"\n                      onBlur={formik.handleBlur}\n                      value={formik.values.phone_no}\n                      onChange={formik.handleChange}\n                    />\n                    {formik.touched.phone_no && formik.errors.phone_no ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.phone_no}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup>\n                {/* <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"hf-categorytype\">\n                      <h6>User in Free Trail?</h6>\n                    </CLabel>\n                  </CCol>\n                  <CCol row md=\"3\">\n                    <CInput\n                      type=\"radio\"\n                      id=\"trail\"\n                      name=\"yesno\"\n                      style={{\n                        width: \"15%\",\n                        marginTop: \"-7px\",\n                        outline: \"none !important\",\n                      }}\n                      onBlur={formik.handleBlur}\n                      value={formik.values.trail}\n                      onChange={formik.handleChange}\n                    />\n                    <label for=\"trail1\">Yes</label>\n                  </CCol>\n                  <CCol row md=\"3\">\n                    <CInput\n                      type=\"radio\"\n                      id=\"trail\"\n                      name=\"yesno\"\n                      style={{ width: \"15%\", marginTop: \"-7px\" }}\n                      onBlur={formik.handleBlur}\n                      value={formik.values.trail}\n                      onChange={formik.handleChange}\n                    />\n                    <label for=\"trail2\">No</label>\n                    {formik.touched.categoryType &&\n                    formik.errors.categoryType ? (\n                      <div className=\"email-validate\">\n                        {formik.errors.categoryType}\n                      </div>\n                    ) : null}\n                  </CCol>\n                </CFormGroup> */}\n                <CCardFooter\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-around\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  {loading ? (\n                    <div className=\"spinner-border text-success\" role=\"status\">\n                      <span className=\"sr-only\">Loading...</span>\n                    </div>\n                  ) : (\n                    <CButton\n                      type=\"submit\"\n                      style={{ width: \"5rem\" }}\n                      color=\"success\"\n                    >\n                      {userDetails.name ? (\n                        <strong>Update</strong>\n                      ) : (\n                        <strong>Add</strong>\n                      )}\n                    </CButton>\n                  )}\n\n                  <CButton\n                    style={{ width: \"5rem\" }}\n                    color=\"danger\"\n                    onClick={() => history.goBack()}\n                  >\n                    <strong>Cancel</strong>\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        )}\n      </CCol>\n    </CContainer>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/recipes.js",["250","251","252","253"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination,\n  CTooltip,\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CModalBody,\n  CButton,\n  CModalTitle,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport { freeSet } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\n\nimport { GetRecipeList, ChangeUserStatus, DeleteRecipe } from \"../../api\";\n\nconst getBadge = (status) => {\n  switch (status) {\n    case \"Active\":\n      return \"success\";\n    case \"Banned\":\n      return \"danger\";\n    default:\n      return \"primary\";\n  }\n};\n\nconst fields = [\n  { key: \"id\", label: \"Id\", _style: { fontFamily: \"Poppins\" } },\n  {\n    key: \"recipe_title\",\n    label: \"Recipe Title \",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"recipeType\",\n    label: \"Recipe Type\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"created_at\",\n    label: \"Posted Date\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"name\",\n    label: \"Posted By\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"show_details\",\n    label: \"Action\",\n    _style: { minWidth: \"7rem\" },\n    sorter: false,\n    filter: false,\n  },\n];\nconst Recipes = () => {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const queryPageSEarch = useLocation().search.match(\n    /search=([A-Za-z0-9 _]+)/,\n    \"\"\n  );\n\n  const currentPageSearch =\n    queryPageSEarch && queryPageSEarch[1] ? queryPageSEarch[1] : \"\";\n\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n\n  const [page, setPage] = useState(currentPage);\n\n  const [data, setData] = useState([]);\n  const [count, setCount] = useState();\n  const [userId, setUserId] = useState(null);\n  const [onsearchCHange, setOnSearchChange] = useState(\n    currentPageSearch ? currentPageSearch : \"\"\n  );\n  const [active, setActive] = useState(null);\n  const [enableModal, setEnableModal] = useState(false);\n  const [refresh, setRefresh] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const pageChange = (newPage) => {\n    let newPage1 = newPage;\n    if (newPage1 === 0) {\n      newPage1 = 1;\n    }\n    currentPage !== newPage &&\n      history.push(`/users?search=${onsearchCHange}&&page=${newPage1}`);\n  };\n\n  const toggleDelete = (id) => {\n    setUserId(id);\n    setDeleteModal(!deleteModal);\n  };\n\n  const handleEnable = async () => {\n    try {\n      setEnableModal(!enableModal);\n      let pass;\n      if (active) {\n        pass = 0;\n      } else {\n        pass = 1;\n      }\n      await ChangeUserStatus(userId, pass);\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      setDeleteModal(!deleteModal);\n      const deleteResult = await DeleteRecipe(userId);\n\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSearchChange = (e) => {\n    setOnSearchChange(e.target.value);\n  };\n\n  const handleSearch = async () => {\n    currentPageSearch !== onsearchCHange &&\n      history.push(`/recipeManagement?search=${onsearchCHange}&&page=${page}`);\n  };\n\n  const handleReset = () => {\n    setOnSearchChange(\"\");\n    let newPage = page;\n    if (newPage === 0) {\n      newPage = 1;\n    }\n    history.push(`/recipeManagement?search=&&page=${newPage}`);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const data = await GetRecipeList(currentPage, currentPageSearch);\n        setLoading(false);\n        data.rows.map((item) => {\n          item._classes = \"catTableItem\";\n\n          if (item.created_at) {\n            item.created_at = item.created_at.slice(0, 10);\n          }\n          return item;\n        });\n\n        setData(data.rows);\n        setCount(data.count);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n\n    getData();\n\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, currentPageSearch, refresh, page]);\n\n  return (\n    <CRow>\n      <CModal\n        show={enableModal}\n        centered={true}\n        color=\"warning\"\n        onClose={setEnableModal}\n        backdrop={true}\n        style={{ fontFamily: \"Poppins\" }}\n      >\n        <CModalHeader style={{ height: \"3rem\" }}>\n          <CModalTitle>{active ? \"Block User?\" : \"Unblock User?\"}</CModalTitle>\n        </CModalHeader>\n        <CModal\n          show={deleteModal}\n          centered={true}\n          backdrop={true}\n          color=\"warning\"\n          onClose={setDeleteModal}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>Delete Category Genre?</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            Are you sure you want to Delete this Category?\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"success\" onClick={handleDelete}>\n              Yes\n            </CButton>\n            <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n              Cancel\n            </CButton>\n          </CModalFooter>\n        </CModal>\n        <CModalBody>\n          {active\n            ? \"Are you sure you want to Block the User?\"\n            : \"Are you sure you want to Unblock the User?\"}\n        </CModalBody>\n        <CModalFooter style={{ height: \"4rem\" }}>\n          <CButton color=\"success\" onClick={handleEnable}>\n            Yes\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setEnableModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal\n        show={deleteModal}\n        centered={true}\n        backdrop={true}\n        color=\"warning\"\n        onClose={setDeleteModal}\n      >\n        <CModalHeader>\n          <CModalTitle>Delete Recipe?</CModalTitle>\n        </CModalHeader>\n        <CModalBody>Are you sure you want to Delete the Recipe?</CModalBody>\n        <CModalFooter>\n          <CButton color=\"primary\" onClick={handleDelete}>\n            Yes\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CCol xxl={12}>\n        <CCard>\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\n            <h2>\n              <strong>Recipes Management</strong>\n            </h2>\n            <CButton\n              style={{ width: \"5rem\", marginLeft: \"90%\" }}\n              color=\"success\"\n              onClick={() => history.push(\"/addRecipe\")}\n            >\n              <strong>Add</strong>\n            </CButton>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={data}\n              fields={fields}\n              hover\n              border\n              addTableClasses=\"table-class\"\n              striped\n              loading={loading}\n              noItemsViewSlot={\n                !loading ? \"\" : <div style={{ height: \"14rem\" }}></div>\n              }\n              clickableRows\n              overTableSlot={\n                <CCol style={{ marginBottom: \"1rem\", display: \"flex\" }} md=\"5\">\n                  <CInputGroup>\n                    <CInputGroupPrepend>\n                      <CInputGroupText\n                        style={{ backgroundColor: \"#0D86FF\", color: \"white\" }}\n                      >\n                        <CIcon content={freeSet.cilSearch} />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      style={{ maxWidth: \"15rem\" }}\n                      value={onsearchCHange}\n                      onChange={handleSearchChange}\n                      id=\"input1-group1\"\n                      name=\"input1-group1\"\n                      placeholder=\"Search\"\n                    />\n\n                    <CButton\n                      onClick={handleSearch}\n                      style={{ marginLeft: \"1rem\" }}\n                      color=\"info\"\n                    >\n                      Search\n                    </CButton>\n                    <CButton\n                      onClick={() => {\n                        handleReset();\n                      }}\n                      style={{ marginLeft: \"1rem\" }}\n                      color=\"info\"\n                    >\n                      Reset\n                    </CButton>\n                  </CInputGroup>\n                </CCol>\n              }\n              underTableSlot={\n                <div style={{ marginBottom: \"1rem\" }}>\n                  Showing {page * 10 - 9}-\n                  {page * 10 < data.length ? page * 10 : data.length} of{\" \"}\n                  {data.length}\n                </div>\n              }\n              scopedSlots={{\n                email: (item) => <td>{item.email}</td>,\n                recipeType: (item) => (\n                  <td>{item.recipe_type == 1 ? \"Veg\" : \"Non Veg\"}</td>\n                ),\n                status: (item) => (\n                  <td>\n                    {item.status == 1 ? (\n                      <CBadge\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\n                        shape=\"pill\"\n                        color={getBadge(\"Active\")}\n                      >\n                        Active\n                      </CBadge>\n                    ) : (\n                      <CBadge\n                        style={{ width: \"4rem\", height: \"1.1rem\" }}\n                        shape=\"pill\"\n                        color={getBadge(\"Banned\")}\n                      >\n                        Blocked\n                      </CBadge>\n                    )}\n                  </td>\n                ),\n                show_details: (item) => {\n                  return (\n                    <td>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-around\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        <CTooltip content={\"edit User\"} placement={\"top-start\"}>\n                          <CIcon\n                            onClick={() =>\n                              history.push({\n                                pathname: `/addRecipe/${item.id}`,\n                                state: { item },\n                              })\n                            }\n                            style={{ color: \"red\", cursor: \"pointer\" }}\n                            size=\"lg\"\n                            content={freeSet.cilPencil}\n                          />\n                        </CTooltip>\n                        <CTooltip\n                          content={`Delete ${item.recipe_title} Recipe\n                          `}\n                          placement={\"top-start\"}\n                          interactive={true}\n                          trigger=\"mouseenter\"\n                        >\n                          <CIcon\n                            onClick={() => toggleDelete(item.id)}\n                            size=\"lg\"\n                            style={{\n                              color: \"red\",\n                              cursor: \"pointer\",\n                              outline: \"none\",\n                              boxShadow: \"none\",\n                            }}\n                            content={freeSet.cilTrash}\n                          />\n                        </CTooltip>\n                      </div>\n                    </td>\n                  );\n                },\n              }}\n            />\n            <CPagination\n              activePage={page}\n              pages={Math.ceil(count / 10)}\n              onActivePageChange={pageChange}\n              doubleArrows={true}\n              align=\"start\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Recipes;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/recipeManagement/addRecipe.js",["254","255","256","257"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CTextarea,\n  CInputFile,\n  CSelect,\n} from \"@coreui/react\";\n\nimport { uploadImage, SavePost, EditPost, GetRecipeDetail } from \"../../api\";\nimport { useLocation, useHistory, useParams } from \"react-router-dom\";\nimport FormData from \"form-data\";\n\nexport default function AddRecipe() {\n  const location = useLocation();\n  const history = useHistory();\n  const params = useParams();\n\n  var phase = [\n    {\n      label: \"kisckstart\",\n      value: 1,\n    },\n    {\n      label: \"phase 1\",\n      value: 2,\n    },\n\n    {\n      label: \"phase 2\",\n      value: 3,\n    },\n    {\n      label: \"phase 3\",\n      value: 4,\n    },\n    {\n      label: \"phase 4\",\n      value: 5,\n    },\n    {\n      label: \"phase 4 eva\",\n      value: 6,\n    },\n  ];\n\n  const [recipeType, setRecipeType] = useState(null);\n  const [disable, setDisable] = useState(false);\n\n  const [show, setShow] = useState({\n    phase_id: \"\",\n    recipe_image_url: \"\",\n    recipe_title: \"\",\n    recipe_ingredients: \"\",\n    recipe_methods: \"\",\n  });\n\n  const [error, setError] = useState({\n    phase_id: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_image_url: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_title: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_ingredients: {\n      error: \"\",\n      blur: \"\",\n    },\n    recipe_methods: {\n      error: \"\",\n      blur: \"\",\n    },\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const GetRecipe = async () => {\n      try {\n        const result = await GetRecipeDetail(params.id);\n        if (result) {\n          setShow(result.recipeDetails);\n          debugger;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    GetRecipe();\n  }, [params.id]);\n\n  const validateForm = () => {\n    let valid = true;\n    let showPhase = \"\";\n    let showTitle = \"\";\n    let showIng = \"\";\n    let showMethod = \"\";\n    if (show.phase_id === \"none\" || show.phase_id === \"\") {\n      valid = false;\n      showPhase = \"Please select Phase\";\n    }\n    if (show.recipe_ingredients === \"\") {\n      valid = false;\n      showIng = \"Please enter Recipe Ingredients\";\n    }\n    if (show.recipe_methods === \"\") {\n      valid = false;\n      showMethod = \"Please enter Recipe Methods\";\n    }\n    if (show.recipe_title === \"\") {\n      valid = false;\n      showTitle = \"Please enter Recipe Title\";\n    }\n    setError({\n      ...error,\n      recipe_title: { ...error.recipe_title, error: showTitle },\n      recipe_ingredients: {\n        ...error.recipe_ingredients,\n        error: showIng,\n      },\n      recipe_methods: {\n        ...error.recipe_methods,\n        error: showMethod,\n      },\n      phase_id: { ...error.phase_id, error: showPhase },\n    });\n\n    return valid;\n  };\n\n  const showFile = async (event) => {\n    event.preventDefault();\n\n    if (event.target.files.length < 1) {\n      return;\n    }\n    setError({\n      ...error,\n      recipe_image_url: { ...error.recipe_image_url, error: \"\" },\n    });\n\n    if (\n      event.target.files[0].type !== \"image/png\" &&\n      event.target.files[0].type !== \"image/jpeg\"\n    ) {\n      setError({\n        ...error,\n        recipe_image_url: {\n          ...error.recipe_image_url,\n          error: \"Only jpeg, png images are allowed\",\n        },\n      });\n      return;\n    }\n\n    var image = event.target.files[0];\n    var data = new FormData();\n    data.append(\"image\", image, image.name);\n    data.append(\"folderName\", \"recipe\");\n\n    try {\n      setDisable(true);\n      const result = await uploadImage(data);\n      if (result) {\n        setDisable(false);\n        setShow({ ...show, recipe_image_url: result.data.recipe_image_url });\n      }\n    } catch (error) {\n      console.log(error);\n      setError({\n        ...error,\n        recipe_image_url: { ...error.recipe_image_url, error: error },\n      });\n    }\n  };\n\n  const handleTitleChange = (e) => {\n    setError({ ...error, recipe_title: { ...error.recipe_title, error: \"\" } });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_title: {\n          ...error.recipe_title,\n          error: \"Please enter Recipe Title\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_title: e.target.value });\n  };\n\n  const handleDescriptionChange = (e) => {\n    setError({\n      ...error,\n      recipe_ingredients: { ...error.recipe_ingredients, error: \"\" },\n    });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_ingredients: {\n          ...error.recipe_ingredients,\n          error: \"Please enter Recipe Ingredients\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_ingredients: e.target.value });\n  };\n\n  const handleMethodsChange = (e) => {\n    setError({\n      ...error,\n      recipe_methods: { ...error.recipe_methods, error: \"\" },\n    });\n\n    if (e.target.value === \"\") {\n      setError({\n        ...error,\n        recipe_methods: {\n          ...error.recipe_methods,\n          error: \"Please enter a Description\",\n        },\n      });\n    }\n    setShow({ ...show, recipe_methods: e.target.value });\n  };\n  const handleCategoryIdChange = (e) => {\n    setError({\n      ...error,\n      phase_id: { ...error.phase_id, error: \"\" },\n    });\n\n    if (e.target.value === \"none\") {\n      setError({\n        ...error,\n        phase_id: {\n          ...error.phase_id,\n          error: \"Please enter a Phase\",\n        },\n      });\n    }\n    setShow({ ...show, phase_id: e.target.value });\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    if (params.id) {\n      const body = {\n        phase_id: Number(show.phase_id),\n        recipe_image_url: show.recipe_image_url,\n        recipe_title: show.recipe_title,\n        recipe_ingredients: show.recipe_ingredients,\n        recipe_methods: show.recipe_methods,\n        recipe_type: recipeType ? recipeType : show.recipe_type,\n      };\n      try {\n        setLoading(true);\n        const response = await EditPost(params.id, body);\n        setLoading(false);\n        if (response) {\n          history.push(\"/recipeManagement\");\n        }\n      } catch (error) {\n        setLoading(false);\n        console.log(error);\n      }\n    } else {\n      const body = {\n        phase_id: Number(show.phase_id),\n        recipe_image_url: show.recipe_image_url,\n        recipe_title: show.recipe_title,\n        recipe_ingredients: show.recipe_ingredients,\n        recipe_methods: show.recipe_methods,\n        recipe_type: recipeType,\n      };\n      try {\n        setLoading(true);\n        const response = await SavePost(body);\n        setLoading(false);\n        if (response) {\n          history.push(\"/recipeManagement\");\n        }\n      } catch (error) {\n        setLoading(false);\n        console.log(error);\n      }\n    }\n  };\n\n  const handleRecipeType = (type) => {\n    setRecipeType(type);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <CContainer\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {\n          <CCol xl=\"10\" md=\"10\">\n            <CCard>\n              <CCardHeader style={{ fontFamily: \"Lato\" }}>\n                <h3>\n                  {location.state ? (\n                    <strong>Edit Recipe</strong>\n                  ) : (\n                    <strong>Add Recipe</strong>\n                  )}\n                </h3>\n              </CCardHeader>\n\n              <CCardBody\n                style={{\n                  fontFamily: \"Roboto\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div className=\"form-horizontal\">\n                  <div style={{ margin: \"auto\" }}>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel>\n                          <h6>\n                            <strong>Enter Recipe Title:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CInput\n                          type=\"text\"\n                          id=\"recipe_title\"\n                          name=\"recipe_title\"\n                          value={show.recipe_title}\n                          onChange={(e) => handleTitleChange(e)}\n                          onBlur={handleTitleChange}\n                        />\n                        {error.recipe_title.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_title.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"hf-recipe_image_url\">\n                          <h6>\n                            <strong>Upload Recipe Image:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CInputFile\n                          id=\"recipe_image_url\"\n                          name=\"recipe_image_url\"\n                          type=\"file\"\n                          onChange={(e) => {\n                            const id = `recipe_image_url`;\n                            showFile(e);\n                          }}\n                        />\n                        <div>Please upload 100*100 resolution image</div>\n                        {error.recipe_image_url.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_image_url.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel\n                          style={{ fontFamily: \"Poppins\" }}\n                          htmlFor=\"textarea-input\"\n                        >\n                          <h6>\n                            <strong>Enter Recipe Ingredients:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"4\" md=\"9\">\n                        <CTextarea\n                          type=\"text\"\n                          id=\"recipe_ingredients\"\n                          name=\"recipe_ingredients\"\n                          onBlur={handleDescriptionChange}\n                          value={show.recipe_ingredients}\n                          onChange={handleDescriptionChange}\n                          rows=\"6\"\n                        />\n                        {error.recipe_ingredients.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_ingredients.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel\n                          style={{ fontFamily: \"Poppins\" }}\n                          htmlFor=\"textarea-input\"\n                        >\n                          <h6>\n                            <strong>Enter Recipe Methods:</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"4\" md=\"9\">\n                        <CTextarea\n                          type=\"text\"\n                          id=\"recipe_methods\"\n                          name=\"recipe_methods\"\n                          onBlur={handleMethodsChange}\n                          value={show.recipe_methods}\n                          onChange={handleMethodsChange}\n                          rows=\"6\"\n                        />\n                        {error.recipe_methods.error && (\n                          <div className=\"email-validate\">\n                            {error.recipe_methods.error}\n                          </div>\n                        )}\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"recipe_type\">\n                          <h6>Recipe type?</h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol row md=\"3\">\n                        <label for={1}>\n                          <CInput\n                            type=\"radio\"\n                            id={1}\n                            formControlName=\"recipe_type\"\n                            checked={show.recipe_type == 1 ? \"checked\" : \"\"}\n                            style={{\n                              width: \"60%\",\n                              marginTop: \"-7px\",\n                              outline: \"none !important\",\n                            }}\n                            onChange={() => {\n                              handleRecipeType(1);\n                            }}\n                          />\n                          Veg\n                        </label>\n                      </CCol>\n                      <CCol row md=\"3\">\n                        <label for={2}>\n                          <CInput\n                            type=\"radio\"\n                            id={2}\n                            formControlName=\"recipe_type\"\n                            checked={show.recipe_type == 2 ? \"checked\" : \"\"}\n                            value={show.recipe_type}\n                            style={{ width: \"28%\", marginTop: \"-7px\" }}\n                            onChange={() => {\n                              handleRecipeType(2);\n                            }}\n                          />\n                          Non Veg\n                        </label>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"hf-category\">\n                          <h6>\n                            <strong>Phase</strong>\n                          </h6>\n                        </CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CSelect\n                          value={show.phase_id}\n                          onChange={handleCategoryIdChange}\n                          onBlur={handleCategoryIdChange}\n                          custom\n                          name=\"phase_id\"\n                          id=\"phase_id\"\n                          options={phase}\n                        >\n                          <option value=\"none\">Select Phase</option>\n                          {phase.map((item, index) => (\n                            <option key={index} value={item.value}>\n                              {item.label}\n                            </option>\n                          ))}\n                        </CSelect>\n                        {error.phase_id.error && (\n                          <div className=\"email-validate\">\n                            {error.phase_id.error}\n                          </div>\n                        )}\n                        {/* {formik.touched.categoryTypeId && formik.errors.categoryTypeId ? <div className=\"email-validate\">{formik.errors.categoryTypeId}</div> : null} */}\n                      </CCol>\n                    </CFormGroup>\n                  </div>\n                  <div style={{ textAlign: \"-webkit-center\" }}>\n                    {loading ? (\n                      <div\n                        className=\"spinner-border text-success\"\n                        role=\"status\"\n                      >\n                        <span className=\"sr-only\">Loading...</span>\n                      </div>\n                    ) : (\n                      <CButton\n                        // disabled={disable}\n                        type=\"submit\"\n                        name=\"submit\"\n                        color=\"success\"\n                        style={{ width: \"75px\" }}\n                      >\n                        Save\n                      </CButton>\n                    )}\n                    <CButton\n                      style={{ width: \"5rem\", marginLeft: \"2rem\" }}\n                      color=\"danger\"\n                      onClick={() => history.goBack()}\n                    >\n                      <strong>Cancel</strong>\n                    </CButton>\n                  </div>\n                </div>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        }\n      </CContainer>\n    </form>\n  );\n}\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/viewStaticContent.js",["258","259"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { getStaticContentDetails, getFileContent } from \"../../../api\";\nimport { CButton } from \"@coreui/react\";\nconst ViewStaticContent = () => {\n  const history = useHistory();\n  const params = useParams();\n\n  const [staticContentDetails, setStaticContentDetails] = useState([]);\n\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        const data = getStaticContentDetails(Number(params.id)).then((data) => {\n          setStaticContentDetails(data.staticContentDetails);\n          const Details = getFileContent(\n            data.staticContentDetails.page_url\n          ).then((Details) => {\n            debugger;\n            document.getElementById(\"doc\").innerHTML = Details;\n            console.log(Details);\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getDetails();\n  }, [params.id]);\n\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        {staticContentDetails && (\n          <div\n            id=\"recipients\"\n            className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n          >\n            <br />\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.push(`/editStaticContent/${params.id}`)}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Edit\n            </CButton>\n\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                width: \"100%\",\n              }}\n            >\n              <div className=\"flex \">\n                <h1 className=\"text-xl\">{staticContentDetails.title}</h1>\n              </div>\n\n              <div className=\"flex mt-10 \">\n                <div className=\"flex flex-col ml-40\">\n                  <br />\n                  <div\n                    id=\"doc\"\n                    style={{\n                      maxHeight: \"230px\",\n                      height: \"300px\",\n                      overflow: \"auto\",\n                      border: \"1px solid black\",\n                      padding: \"10px\",\n                    }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ViewStaticContent;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/staticContent.js",["260","261"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CTooltip,\n} from \"@coreui/react\";\nimport { freeSet } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\n\nimport { getStaticContents } from \"../../api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\n\nconst fields = [\n  { key: \"id\", label: \"S.No\", _style: { fontFamily: \"Poppins\" } },\n  {\n    key: \"title\",\n    label: \"Page Name \",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"updatedAt\",\n    label: \"Last Updated\",\n    _style: { fontFamily: \"Poppins\" },\n  },\n  {\n    key: \"show_details\",\n    label: \"Action\",\n    _style: { minWidth: \"7rem\" },\n    sorter: false,\n    filter: false,\n  },\n];\nconst StaticContentList = () => {\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const data = await getStaticContents();\n        setLoading(false);\n        data.staticContentList.map((item) => {\n          item._classes = \"catTableItem\";\n\n          if (item.updatedAt) {\n            item.updatedAt = item.updatedAt.slice(0, 10);\n          }\n          return item;\n        });\n        setData(data.staticContentList);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    getData();\n  }, []);\n\n  return (\n    <CRow>\n      <CCol xxl={12}>\n        <CCard>\n          <CCardHeader style={{ fontFamily: \"Lato\" }}>\n            <h2>\n              <strong>Content Management</strong>\n            </h2>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={data}\n              fields={fields}\n              hover\n              border\n              addTableClasses=\"table-class\"\n              striped\n              loading={loading}\n              noItemsViewSlot={\n                !loading ? \"\" : <div style={{ height: \"14rem\" }}></div>\n              }\n              clickableRows\n              scopedSlots={{\n                show_details: (item) => {\n                  return (\n                    <td>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-around\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {item.id != 5 ? (\n                          <CTooltip\n                            content={\"edit User\"}\n                            placement={\"top-start\"}\n                          >\n                            <CIcon\n                              onClick={() =>\n                                history.push({\n                                  pathname: `/editStaticContent/${item.id}`,\n                                  state: { item },\n                                })\n                              }\n                              style={{ color: \"red\", cursor: \"pointer\" }}\n                              size=\"lg\"\n                              content={freeSet.cilPencil}\n                            />\n                          </CTooltip>\n                        ) : (\n                          \"\"\n                        )}\n                        <CTooltip\n                          content={`View Content`}\n                          placement={\"top-start\"}\n                        >\n                          <FontAwesomeIcon\n                            color=\"green\"\n                            size=\"lg\"\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() =>\n                              item.id == 5\n                                ? history.push({\n                                    pathname: `/viewStaticContent/${item.id}/faqs`,\n                                    state: { item },\n                                  })\n                                : history.push({\n                                    pathname: `/viewStaticContent/${item.id}`,\n                                    state: { item },\n                                  })\n                            }\n                            icon={faEye}\n                          />\n                        </CTooltip>\n                      </div>\n                    </td>\n                  );\n                },\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default StaticContentList;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/viewStaticContent/faqQ.js",["262","263","264","265","266","267"],"import React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"react-collapse\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\nimport { DeleteFaq, getFaqs } from \"../../../api\";\nimport { useHistory, useParams } from \"react-router\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {\n  CPagination,\n  CButton,\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CModalBody,\n  CModalTitle,\n} from \"@coreui/react\";\n\nconst FAQS = () => {\n  const history = useHistory();\n\n  // const { id } = useParams();\n  const path = useParams();\n  const id = path.id;\n  const topicid = path.topicid;\n\n  const [statusOpened, setStatusOpened] = useState({});\n  const [qus, setQus] = useState([]);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [questionId, setQuestionId] = useState(null);\n\n  const [show, setShow] = useState(null);\n  const [error, setError] = useState(null);\n  const [pageSize, setPageSize] = useState(10);\n  const [activePage, setCurrentPage] = useState(1);\n  const [totalItems, setTotalItems] = useState(null);\n  const [startId, setStartId] = useState(0);\n  let endId = qus && (startId < 0 ? 0 : startId + qus.length);\n\n  const handleCollapse = (e, id) => {\n    // let updatedStatus = { ...statusOpened };\n    let updatedStatus = { statusOpened };\n    updatedStatus[id] = !updatedStatus[id];\n    setStatusOpened(updatedStatus);\n  };\n\n  useEffect(() => {\n    handleQuestions();\n  }, [topicid, activePage]);\n\n  const handleQuestions = async () => {\n    const data = await getFaqs(activePage);\n    if (data.status == 200) {\n      setError(null);\n      let rows = data.faqsData.rows;\n      let status = {};\n      rows.forEach(({ id }) => (status[id] = false));\n      setStatusOpened(status);\n      setQus(data.faqsData.rows);\n      setTotalItems(data.faqsData.count);\n      let newStartId = pageSize * (activePage - 1);\n      setStartId(newStartId);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      setDeleteModal(!deleteModal);\n      const deleteResult = await DeleteFaq(questionId);\n      if (deleteResult.status == 200) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <>\n      <CModal\n        show={deleteModal}\n        centered={true}\n        backdrop={true}\n        color=\"warning\"\n        onClose={setDeleteModal}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Delete FAQ?</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          Are you sure you want to Delete this FAQ question?\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={handleDelete}>\n            Yes\n          </CButton>\n          <CButton color=\"secondary\" onClick={() => setDeleteModal(false)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <div\n        className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\"\n        style={{ height: \"100vh\" }}\n      >\n        <div id=\"recipients\" className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded  \">\n          <h1 className=\"text-3xl\">FAQs</h1>\n          <br />\n          <div style={{ marginLeft: \"80%\", marginTop: \"-88px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.push(`/viewStaticContent/${id}/addFaqs`)}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Add New\n            </CButton>\n          </div>\n        </div>\n        <div className=\"flex \">\n          {qus && (\n            <div\n              style={{\n                marginLeft: \"90px\",\n                backgroundColor: \"white\",\n                padding: \"20px\",\n                height: \"fit-content\",\n                marginTop: \"50px\",\n                border: error != null ? \"1px solid white\" : \"1px solid black\",\n              }}\n            >\n              <div\n                id=\"doc\"\n                style={{\n                  height: \"fit-content\",\n                }}\n              >\n                {error ? (\n                  <p\n                    style={{\n                      color: \"red\",\n                      fontSize: \"20px\",\n                      textAlign: \"center\",\n                      width: \"100%\",\n                      marginTop: \"12px\",\n                    }}\n                  >\n                    {error}\n                  </p>\n                ) : (\n                  qus.map((ques) => {\n                    return (\n                      <>\n                        <div\n                          style={{\n                            width: \"100%\",\n                            padding: \"10px\",\n                          }}\n                          onClick={(e) => handleCollapse(e, ques.id)}\n                        >\n                          <label\n                            htmlFor={\"acc\" + ques.id}\n                            style={{ fontSize: \"20px\", wordBreak: \"break-all\" }}\n                            className=\"font-semibold\"\n                          >\n                            {ques.question}\n                            {!statusOpened[ques.id] ? (\n                              <ArrowDropDownIcon style={{ float: \"right\" }} />\n                            ) : (\n                              <ArrowDropUpIcon style={{ float: \"right\" }} />\n                            )}\n                          </label>\n                          <Collapse\n                            isOpened={statusOpened[ques.id]}\n                            id={\"acc\" + ques.id}\n                          >\n                            <div\n                              style={{\n                                backgroundColor: \"lightgrey\",\n                                padding: \"10px\",\n                                marginTop: \"3px\",\n                              }}\n                            >\n                              <p style={{ fontSize: \"17px\" }}>{ques.answer}</p>\n                              <div style={{ textAlign: \"right\" }}>\n                                <FontAwesomeIcon\n                                  style={{ cursor: \"pointer\" }}\n                                  onClick={() =>\n                                    history.push(\n                                      `/viewStaticContent/${id}/faqs/${ques.id}/editFaqs`\n                                    )\n                                  }\n                                  className=\"text-red-600 trash w-5 h-5\"\n                                  color=\"red\"\n                                  icon={faPencilAlt}\n                                />\n                                <FontAwesomeIcon\n                                  className=\"text-red-600 trash w-5 h-5 ml-4\"\n                                  color=\"red\"\n                                  onClick={() => {\n                                    setShow(\"question\");\n                                    setDeleteModal(true);\n                                    setQuestionId(ques.id);\n                                  }}\n                                  icon={faTrashAlt}\n                                />\n                              </div>\n                            </div>\n                          </Collapse>\n                        </div>\n                      </>\n                    );\n                  })\n                )}\n                <br />\n                (showing {startId < 0 ? 0 : startId + 1} - {endId} of{\" \"}\n                {totalItems})\n                <div style={{ textAlign: \"right\" }}>\n                  <CPagination\n                    activePage={activePage}\n                    pages={Math.ceil(totalItems / 10)}\n                    onActivePageChange={handlePageChange}\n                    doubleArrows={true}\n                    align=\"start\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FAQS;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/editStaticContent/editStaticContent.js",["268","269","270","271","272","273","274"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport {\n  getStaticContentDetails,\n  updateStaticContent,\n  uploadImage,\n  getFileContent,\n} from \"../../../api\";\nimport Loader from \"../../../globalComponent/loader\";\nimport { CButton } from \"@coreui/react\";\n\nconst EditStaticContent = () => {\n  const history = useHistory();\n  const params = useParams();\n  const [staticContentDetails, setStaticContentDetails] = useState(null);\n\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  const [image_url, setImage_url] = useState(null);\n  const [filename, setFilename] = useState(null);\n\n  useEffect(() => {\n    const getContent = async () => {\n      try {\n        const data = getStaticContentDetails(Number(params.id)).then((data) => {\n          const Details = getFileContent(\n            data.staticContentDetails.page_url\n          ).then((Details) => {\n            document.getElementById(\"doc\").innerHTML = Details;\n            console.log(Details);\n          });\n\n          setStaticContentDetails(data.staticContentDetails);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getContent();\n  }, []);\n\n  const handleUploadFile = async (e) => {\n    setFilename(e.target.files[0].name);\n\n    const bodyFormData = new FormData();\n    bodyFormData.append(\"image\", e.target.files[0], e.target.files[0].name);\n    bodyFormData.append(\"folderName\", \"other\");\n    try {\n      const res = await uploadImage(bodyFormData);\n      if (res.status == 200) {\n        setError(null);\n        updateContent(res.data.image_url);\n        setImage_url(res.data.image_url);\n      }\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  const updateContent = (url) => {\n    try {\n      const Details = getFileContent(url).then((Details) => {\n        document.getElementById(\"doc\").innerHTML = Details;\n        console.log(Details);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmitUpdatedFile = async () => {\n    var data = new FormData();\n\n    data.append(\"content_id\", params.id);\n    data.append(\"page_url\", image_url);\n    try {\n      const res = await updateStaticContent(data);\n      if (res.status == 200) {\n        setSuccessMsg(\"Content updated successfully\");\n        setTimeout(() => {\n          history.push(\"/static\");\n        }, 1000);\n      }\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        {!staticContentDetails ? (\n          <Loader />\n        ) : (\n          <div\n            id=\"recipients\"\n            className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n          >\n            <br />\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmitUpdatedFile}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n            <br />\n            {error && (\n              <p\n                style={{\n                  color: \"red\",\n                  fontSize: \"20px\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                  marginTop: \"12px\",\n                }}\n              >\n                {error}\n              </p>\n            )}\n            {successMsg && (\n              <div\n                style={{\n                  backgroundColor: \"#9ACD32\",\n                  padding: \"10px\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  marginTop: \"24px\",\n                  width: \"fit-content\",\n                }}\n              >\n                {successMsg}\n              </div>\n            )}\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                height: \"610px\",\n              }}\n            >\n              <div className=\"flex \">\n                <h1 className=\"text-xl\">{staticContentDetails.title}</h1>\n              </div>\n              <div className=\"flex mt-10 \">\n                <div className=\"flex flex-col ml-40\">\n                  <div\n                    id=\"doc\"\n                    style={{\n                      marginLeft: \"70px\",\n                      fontSize: \"15px\",\n                      marginLeft: \"10px\",\n                      maxHeight: \"200px\",\n                      height: \"300px\",\n                      overflow: \"auto\",\n                      padding: \"10px\",\n                      border: \"1px solid black\",\n                    }}\n                  ></div>\n                  <div style={{ display: \"flex\" }}>\n                    <label for=\"upload\" className=\"w-24 block \">\n                      <div className=\"w-full px-2 py-1 ml-5 my-2 flex justify-around items-center bg-gray-400 rounded-lg text-white\">\n                        Upload File\n                        <input\n                          type=\"file\"\n                          onChange={handleUploadFile}\n                          id=\"upload\"\n                          style={{ display: \"none\", padding: \"10px\" }}\n                          accept=\".html\"\n                        />\n                      </div>\n                    </label>\n                    <span\n                      style={{\n                        color: \"red\",\n                        paddingTop: \"13px\",\n                        paddingLeft: \"10px\",\n                      }}\n                    >\n                      Upload file of type html\n                    </span>\n                    {filename && (\n                      <p\n                        style={{\n                          marginTop: \"12px\",\n                          fontSize: \"15px\",\n                          marginLeft: \"10px\",\n                        }}\n                      >\n                        {filename}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default EditStaticContent;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/editFaqs/editFaqs.js",["275","276","277","278","279"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { getFaqById, editFaqs } from \"../../../../api\";\nimport { useSelector } from \"react-redux\";\nimport Loader from \"../../../../globalComponent/loader\";\nimport { CButton } from \"@coreui/react\";\n\nconst EditFqs = () => {\n  const history = useHistory();\n  const path = useParams();\n  const id = path.questionId;\n\n  const [faqs, setFaqs] = useState({});\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  useEffect(() => {\n    faqById();\n  }, []);\n\n  const faqById = () => {\n    const res = getFaqById(id)\n      .then((res) => {\n        setFaqs(res);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleValidation = () => {\n    let error = false;\n    if (faqs.question === \"\") {\n      setError(\"Please fill the question \");\n      error = true;\n    } else if (faqs.answer === \"\") {\n      setError(\"Please fill the answer \");\n      error = true;\n    }\n    return error;\n  };\n\n  const handleSubmit = () => {\n    if (!handleValidation()) {\n      const bodyData = new FormData();\n\n      bodyData.append(\"question\", faqs.question);\n      bodyData.append(\"answer\", faqs.answer);\n\n      const res = editFaqs(faqs.id, bodyData)\n        .then((res) => {\n          if (res.status == 200) {\n            setError(null);\n            setSuccessMsg(\"FAQ updated successfully\");\n            setTimeout(() => {\n              history.push(`/viewStaticContent/${id}/faqs`);\n            }, 1000);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  };\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        <div\n          id=\"recipients\"\n          className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n        >\n          <h1 className=\"text-2xl\">Edit FAQ</h1>\n          <br />\n          <div style={{ marginLeft: \"80%\", marginTop: \"-70px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmit}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n          </div>\n          <br />\n          {error && (\n            <p\n              style={{\n                color: \"red\",\n                fontSize: \"20px\",\n                textAlign: \"center\",\n                width: \"100%\",\n                marginTop: \"12px\",\n              }}\n            >\n              {error}\n            </p>\n          )}\n          {successMsg && (\n            <div\n              style={{\n                backgroundColor: \"#9ACD32\",\n                padding: \"10px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"24px\",\n                width: \"fit-content\",\n              }}\n            >\n              {successMsg}\n            </div>\n          )}\n\n          {!faqs ? (\n            <Loader />\n          ) : (\n            <div\n              style={{\n                marginTop: \"20px\",\n                backgroundColor: \"lightgrey\",\n                padding: \"20px\",\n                height: \"400px\",\n              }}\n            >\n              <div className=\"flex mt-10 \">\n                <h1 className=\"text-xl ml-50 \">Question</h1>\n                <input\n                  style={{\n                    width: \"70%\",\n                    marginLeft: \"140px\",\n                    height: \"40px\",\n                    padding: \"10px\",\n                  }}\n                  placeholder=\"Enter the question \"\n                  value={faqs.question}\n                  onChange={(e) => {\n                    let updatedData = { ...faqs };\n                    updatedData[\"question\"] = e.target.value;\n                    setFaqs(updatedData);\n                  }}\n                />\n              </div>\n\n              <div className=\"flex mt-10 \">\n                <h1 className=\"text-xl ml-50 \">Answer</h1>\n                <textarea\n                  placeholder=\"Enter the answer \"\n                  style={{\n                    width: \"70%\",\n                    height: \"100px\",\n                    marginLeft: \"140px\",\n                    padding: \"10px\",\n                  }}\n                  id=\"ans\"\n                  value={faqs.answer}\n                  onChange={(e) => {\n                    let updatedData = { ...faqs };\n                    updatedData[\"answer\"] = e.target.value;\n                    setFaqs(updatedData);\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditFqs;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/views/staticContentManagement/Faqs/addFqs/addFaqs.js",["280","281","282"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { CButton } from \"@coreui/react\";\nimport { addFaq } from \"../../../../api\";\nimport { useSelector } from \"react-redux\";\n\nconst AddFaqs = () => {\n  const token = useSelector((state) => state.auth.isSignedIn);\n  const history = useHistory();\n  const { id } = useParams();\n\n  const [data, setData] = useState({\n    answer: \"\",\n    question: \"\",\n  });\n\n  const [error, setError] = useState(null);\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  const handleValidation = () => {\n    let error = false;\n    if (data.question === \"\") {\n      setError(\"Please fill the question \");\n      error = true;\n    } else if (data.answer === \"\") {\n      setError(\"Please fill the answer \");\n      error = true;\n    }\n    return error;\n  };\n\n  const handleSubmit = async () => {\n    if (!handleValidation()) {\n      const res = await addFaq(data)\n        .then((res) => {\n          setSuccessMsg(\"FAQs added successfully\");\n          setTimeout(() => {\n            history.push(`/viewStaticContent/${id}/faqs`);\n          }, 1000);\n\n          setError(null);\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  };\n  return (\n    <>\n      <div className=\"main-content pb-16 md:pb-5 flex-1 pt-20 px-2\">\n        <div\n          id=\"recipients\"\n          className=\"p-4 md:p-8 mt-6 lg:mt-0 rounded shadow bg-white\"\n        >\n          <h1 className=\"text-2xl\">Add FAQ</h1>\n          <br />\n          <div style={{ marginLeft: \"80%\", marginTop: \"-78px\" }}>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={() => history.goBack()}\n              className=\"shadow bg-blue-500 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Back\n            </CButton>\n            <CButton\n              style={{ height: \"3rem\" }}\n              onClick={handleSubmit}\n              className=\"shadow bg-blue-500 ml-3 hover:bg-blue-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"\n              color=\"primary\"\n            >\n              Save\n            </CButton>\n          </div>\n\n          <br />\n          {error && (\n            <p\n              style={{\n                color: \"red\",\n                fontSize: \"20px\",\n                textAlign: \"center\",\n                width: \"100%\",\n                marginTop: \"12px\",\n              }}\n            >\n              {error}\n            </p>\n          )}\n          {successMsg && (\n            <div\n              style={{\n                backgroundColor: \"#9ACD32\",\n                padding: \"10px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"24px\",\n                width: \"fit-content\",\n              }}\n            >\n              {successMsg}\n            </div>\n          )}\n          <div\n            style={{\n              marginTop: \"20px\",\n              backgroundColor: \"lightgrey\",\n              padding: \"20px\",\n              // width: '990px',\n              height: \"400px\",\n            }}\n          >\n            <div className=\"flex mt-10 \">\n              <h1 className=\"text-xl ml-50 \">Question</h1>\n              <input\n                style={{\n                  width: \"70%\",\n                  marginLeft: \"110px\",\n                  height: \"40px\",\n                  padding: \"10px\",\n                }}\n                placeholder=\"Enter the question\"\n                onChange={(e) => {\n                  let updatedData = { ...data };\n                  updatedData[\"question\"] = e.target.value;\n                  setData(updatedData);\n                }}\n              />\n            </div>\n\n            <div className=\"flex mt-10 \">\n              <h1 className=\"text-xl ml-50 \">Answer</h1>\n              <textarea\n                placeholder=\"Enter the answer\"\n                style={{\n                  width: \"70%\",\n                  height: \"100px\",\n                  marginLeft: \"110px\",\n                  padding: \"10px\",\n                }}\n                id=\"ans\"\n                onChange={(e) => {\n                  let updatedData = { ...data };\n                  updatedData[\"answer\"] = e.target.value;\n                  setData(updatedData);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AddFaqs;\n","/home/sonal/Documents/projects/changing-habits-adminpanel/src/globalComponent/loader.js",["283","284"],"import React,{useState} from 'react';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst override = css`\n  display: block;\n  margin: 10px auto;\n  border-color: blue;\n`;\n\n\nconst Loader = () =>{\n    let [loading, setLoading] = useState(true);\n    let [color, setColor] = useState(\"#ffffff\");\n  \n    return (\n      <div className=\"sweet-loading\" style={{height: '800px'}}>\n      <ClipLoader color={color} loading={loading} css={override} size={150} />\n      </div>\n    );\n}\n\nexport default Loader;",{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":21,"column":7,"nodeType":"291","messageId":"292","endLine":21,"endColumn":16},{"ruleId":"289","severity":1,"message":"293","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":15},{"ruleId":"294","severity":1,"message":"295","line":358,"column":27,"nodeType":"296","messageId":"297","endLine":358,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":562,"column":27,"nodeType":"296","messageId":"297","endLine":562,"endColumn":29},{"ruleId":"289","severity":1,"message":"298","line":3,"column":29,"nodeType":"291","messageId":"292","endLine":3,"endColumn":41},{"ruleId":"289","severity":1,"message":"299","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":15},{"ruleId":"289","severity":1,"message":"300","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":17},{"ruleId":"289","severity":1,"message":"301","line":21,"column":9,"nodeType":"291","messageId":"292","endLine":21,"endColumn":15},{"ruleId":"289","severity":1,"message":"302","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":12},{"ruleId":"289","severity":1,"message":"301","line":39,"column":9,"nodeType":"291","messageId":"292","endLine":39,"endColumn":15},{"ruleId":"294","severity":1,"message":"295","line":80,"column":22,"nodeType":"296","messageId":"297","endLine":80,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":313,"column":34,"nodeType":"296","messageId":"297","endLine":313,"endColumn":36},{"ruleId":"303","severity":1,"message":"304","line":49,"column":6,"nodeType":"305","endLine":49,"endColumn":8,"suggestions":"306"},{"ruleId":"294","severity":1,"message":"295","line":54,"column":22,"nodeType":"296","messageId":"297","endLine":54,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":70,"column":22,"nodeType":"296","messageId":"297","endLine":70,"endColumn":24},{"ruleId":"294","severity":1,"message":"307","line":83,"column":25,"nodeType":"296","messageId":"297","endLine":83,"endColumn":27},{"ruleId":"294","severity":1,"message":"307","line":84,"column":26,"nodeType":"296","messageId":"297","endLine":84,"endColumn":28},{"ruleId":"294","severity":1,"message":"307","line":85,"column":29,"nodeType":"296","messageId":"297","endLine":85,"endColumn":31},{"ruleId":"289","severity":1,"message":"308","line":94,"column":18,"nodeType":"291","messageId":"292","endLine":94,"endColumn":27},{"ruleId":"289","severity":1,"message":"309","line":132,"column":13,"nodeType":"291","messageId":"292","endLine":132,"endColumn":25},{"ruleId":"294","severity":1,"message":"295","line":330,"column":41,"nodeType":"296","messageId":"297","endLine":330,"endColumn":43},{"ruleId":"294","severity":1,"message":"295","line":334,"column":34,"nodeType":"296","messageId":"297","endLine":334,"endColumn":36},{"ruleId":"289","severity":1,"message":"310","line":55,"column":10,"nodeType":"291","messageId":"292","endLine":55,"endColumn":17},{"ruleId":"289","severity":1,"message":"311","line":378,"column":35,"nodeType":"291","messageId":"292","endLine":378,"endColumn":37},{"ruleId":"294","severity":1,"message":"295","line":458,"column":55,"nodeType":"296","messageId":"297","endLine":458,"endColumn":57},{"ruleId":"294","severity":1,"message":"295","line":477,"column":55,"nodeType":"296","messageId":"297","endLine":477,"endColumn":57},{"ruleId":"289","severity":1,"message":"312","line":14,"column":15,"nodeType":"291","messageId":"292","endLine":14,"endColumn":19},{"ruleId":"289","severity":1,"message":"313","line":16,"column":17,"nodeType":"291","messageId":"292","endLine":16,"endColumn":24},{"ruleId":"294","severity":1,"message":"307","line":101,"column":34,"nodeType":"296","messageId":"297","endLine":101,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":130,"column":39,"nodeType":"296","messageId":"297","endLine":130,"endColumn":41},{"ruleId":"289","severity":1,"message":"314","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":9},{"ruleId":"289","severity":1,"message":"315","line":34,"column":10,"nodeType":"291","messageId":"292","endLine":34,"endColumn":14},{"ruleId":"289","severity":1,"message":"316","line":36,"column":20,"nodeType":"291","messageId":"292","endLine":36,"endColumn":31},{"ruleId":"303","severity":1,"message":"317","line":51,"column":6,"nodeType":"305","endLine":51,"endColumn":27,"suggestions":"318"},{"ruleId":"294","severity":1,"message":"295","line":55,"column":21,"nodeType":"296","messageId":"297","endLine":55,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":72,"column":31,"nodeType":"296","messageId":"297","endLine":72,"endColumn":33},{"ruleId":"289","severity":1,"message":"312","line":26,"column":15,"nodeType":"291","messageId":"292","endLine":26,"endColumn":19},{"ruleId":"289","severity":1,"message":"313","line":27,"column":17,"nodeType":"291","messageId":"292","endLine":27,"endColumn":24},{"ruleId":"303","severity":1,"message":"319","line":41,"column":6,"nodeType":"305","endLine":41,"endColumn":8,"suggestions":"320"},{"ruleId":"294","severity":1,"message":"295","line":51,"column":22,"nodeType":"296","messageId":"297","endLine":51,"endColumn":24},{"ruleId":"289","severity":1,"message":"313","line":63,"column":13,"nodeType":"291","messageId":"292","endLine":63,"endColumn":20},{"ruleId":"294","severity":1,"message":"295","line":79,"column":22,"nodeType":"296","messageId":"297","endLine":79,"endColumn":24},{"ruleId":"321","severity":1,"message":"322","line":163,"column":23,"nodeType":"323","messageId":"297","endLine":163,"endColumn":33},{"ruleId":"289","severity":1,"message":"324","line":4,"column":10,"nodeType":"291","messageId":"292","endLine":4,"endColumn":21},{"ruleId":"303","severity":1,"message":"325","line":19,"column":6,"nodeType":"305","endLine":19,"endColumn":8,"suggestions":"326"},{"ruleId":"289","severity":1,"message":"327","line":22,"column":11,"nodeType":"291","messageId":"292","endLine":22,"endColumn":14},{"ruleId":"289","severity":1,"message":"327","line":50,"column":13,"nodeType":"291","messageId":"292","endLine":50,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":52,"column":26,"nodeType":"296","messageId":"297","endLine":52,"endColumn":28},{"ruleId":"289","severity":1,"message":"328","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"329","line":8,"column":9,"nodeType":"291","messageId":"292","endLine":8,"endColumn":14},{"ruleId":"289","severity":1,"message":"327","line":34,"column":13,"nodeType":"291","messageId":"292","endLine":34,"endColumn":16},{"ruleId":"289","severity":1,"message":"330","line":13,"column":19,"nodeType":"291","messageId":"292","endLine":13,"endColumn":29},{"ruleId":"289","severity":1,"message":"331","line":14,"column":17,"nodeType":"291","messageId":"292","endLine":14,"endColumn":25},"no-native-reassign",["332"],"no-negated-in-lhs",["333"],"no-unused-vars","'OtpVerify' is assigned a value but never used.","Identifier","unusedVar","'CModalHeader' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CHeaderBrand' is defined but never used.","'biglogo' is defined but never used.","'AddRecipe' is defined but never used.","'userId' is assigned a value but never used.","'CTextarea' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array.","ArrayExpression",["334"],"Expected '!==' and instead saw '!='.","'setActive' is assigned a value but never used.","'deleteResult' is assigned a value but never used.","'disable' is assigned a value but never used.","'id' is assigned a value but never used.","'data' is assigned a value but never used.","'Details' is assigned a value but never used.","'_' is defined but never used.","'show' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleQuestions'. Either include it or remove the dependency array.",["335"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["336"],"no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'faqById'. Either include it or remove the dependency array.",["337"],"'res' is assigned a value but never used.","'useEffect' is defined but never used.","'token' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},"Update the dependencies array to be: [getUserDetails]",{"range":"346","text":"347"},"Update the dependencies array to be: [topicid, activePage, handleQuestions]",{"range":"348","text":"349"},"Update the dependencies array to be: [params.id]",{"range":"350","text":"351"},"Update the dependencies array to be: [faqById]",{"range":"352","text":"353"},[1290,1292],"[getUserDetails]",[1614,1635],"[topicid, activePage, handleQuestions]",[1238,1240],"[params.id]",[598,600],"[faqById]"]